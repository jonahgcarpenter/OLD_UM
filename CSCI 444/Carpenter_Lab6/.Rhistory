# Display the result to verify
print(nyc_neighborhood_top5)
# Plot the top 5 most expensive neighborhoods by borough
ggplot(nyc_neighborhood_top5, aes(x = reorder(neighbourhood, -avg_price), y = avg_price)) +
geom_bar(stat = "identity", fill = "blue") +
facet_wrap(~ borough, scales = "free_x") +
theme_minimal() +
labs(title = "Top 5 Most Expensive Neighborhoods by Borough in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank()) +
theme(legend.position = "none") +
coord_flip()
library(ggplot2)
library(dplyr)
# Summarize data by borough and neighborhood, calculating the average price
nyc_neighborhood_top5 <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough, neighbourhood) %>%
summarise(avg_price = mean(price)) %>%
slice_max(avg_price, n = 5)
# Plot the top 5 most expensive neighborhoods by borough
ggplot(nyc_neighborhood_top5, aes(x = reorder(neighbourhood, -avg_price), y = avg_price, fill = neighbourhood)) +
geom_bar(stat = "identity") +
facet_wrap(~ borough, scales = "free_x") +
theme_minimal() +
labs(title = "Top 5 Most Expensive Neighborhoods by Borough in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank(),
legend.position = "none",  # Remove legend
axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for better readability
coord_flip()  # Flip coordinates to match the visual style of the sample
library(ggplot2)
library(dplyr)
# Summarize data by borough and neighborhood, calculating the average price
nyc_neighborhood_top5 <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough, neighbourhood) %>%
summarise(avg_price = mean(price)) %>%
slice_max(avg_price, n = 5)
# Plot the top 5 most expensive neighborhoods by borough
ggplot(nyc_neighborhood_top5, aes(x = reorder(neighbourhood, avg_price), y = avg_price, fill = neighbourhood)) +
geom_bar(stat = "identity") +
facet_wrap(~ borough, scales = "free_x") +  # Free only the X-axis scale for comparison
theme_minimal() +
labs(title = "Top 5 Most Expensive Neighborhoods by Borough in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank(),
legend.position = "none",   # Remove legend
axis.text.x = element_text(angle = 0), # Keep X-axis labels horizontal
strip.text = element_text(size = 10, face = "bold"), # Adjust facet label sizes
axis.title.y = element_blank())  # Remove Y-axis label to match your sample
# Find the most expensive neighborhood in each borough
most_expensive_rental <- nyc_neighborhood_top5 %>%
group_by(borough) %>%
slice_max(avg_price, n = 1)
# Display the result
print(most_expensive_rental)
library(ggplot2)
library(dplyr)
library(lubridate)
# Filter data for reviews in 2024
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(ymd(last_review)) == 2024) %>%
filter(!is.na(price))  # Remove entries with NA in price
# Plot the scatterplot
ggplot(nyc_2024, aes(x = ymd(last_review), y = number_of_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set2") +
theme_minimal() +
labs(title = "Airbnb Reviews", subtitle = "2024",
x = "Date of Last Review",
y = "Number of Reviews") +
theme(panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust x-axis label orientation
glimpse(nyc_2024)
library(ggplot2)
library(dplyr)
library(lubridate)
# Filter data for reviews in 2024
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(last_review) == 2024) %>%
filter(!is.na(price))  # Remove entries with NA in price
# Plot the scatterplot
ggplot(nyc_2024, aes(x = last_review, y = num_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set2") +
theme_minimal() +
labs(title = "Airbnb Reviews", subtitle = "2024",
x = "Date of Last Review",
y = "Number of Reviews") +
theme(panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust x-axis label orientation
library(ggplot2)
library(dplyr)
library(lubridate)
# Filter data for reviews in 2024
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(last_review) == 2024) %>%
filter(!is.na(price))  # Remove entries with NA in price
# Plot the scatterplot
ggplot(nyc_2024, aes(x = last_review, y = num_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set2") +
theme_minimal() +
labs(title = "Airbnb Reviews", subtitle = "2024",
x = "Date of Last Review",
y = "Number of Reviews") +
theme(panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")  # Remove the legend
# Find the borough and neighborhood with the highest number of reviews
max_reviews <- nyc_2024 %>%
arrange(desc(num_reviews)) %>%
slice(1)  # Get the top result
# Display the result
print(max_reviews)
View(max_reviews)
# Find the borough, neighborhood, and number of reviews with the highest number of reviews
max_reviews <- nyc_2024 %>%
arrange(desc(num_reviews)) %>%
slice(1) %>%
select(borough, neighbourhood, num_reviews)  # Select only the relevant columns
# Display the result
print(max_reviews)
library(ggplot2)
library(dplyr)
library(lubridate)
# Filter data for reviews in 2024
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(last_review) == 2024) %>%
filter(!is.na(price))  # Remove entries with NA in price
# Create the scatterplot faceted by borough
ggplot(nyc_2024, aes(x = last_review, y = num_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set3") +  # Use Set3 palette for colors by borough
theme_minimal() +
facet_wrap(~ borough, nrow = 1) +  # Facet by borough, keeping all facets in one row
labs(title = "Airbnb Reviews", subtitle = "2024",
x = NULL,  # Do not display the X-axis label
y = "Number of Reviews") +
theme(legend.position = "bottom",  # Move legend to the bottom
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate X-axis labels for better readability
# Find maximum number of reviews per borough
nyc_2024 %>%
group_by(borough) %>%
summarise(max_reviews = max(num_reviews, na.rm = TRUE))
library(dplyr)
# Create the data frame with average price, latitude, and longitude
nyc_neighborhood_top3 <- nyc %>%
group_by(borough, neighbourhood) %>%
summarise(
avg_price = mean(price, na.rm = TRUE),    # Calculate the average price
lat = mean(latitude, na.rm = TRUE),       # Calculate the average latitude
long = mean(longitude, na.rm = TRUE)      # Calculate the average longitude
) %>%
slice_max(avg_price, n = 3)  # Select top 3 by average price
# Display the result
print(nyc_neighborhood_top3)
library(leaflet)
# Visualize the top 3 Airbnbs per neighborhood on a map
nyc_neighborhood_top3 %>%
leaflet(options = leafletOptions(zoomSnap = 0.1)) %>%
addTiles() %>%
setView(lng = -74.00, lat = 40.71, zoom = 12) %>%
addMarkers(~long, ~lat)
# 8
nyc_neighborhood_top3 <- nyc %>%
group_by(borough, neighbourhood) %>%
summarise(
avg_price = mean(price, na.rm = TRUE),
lat = mean(latitude, na.rm = TRUE),
long = mean(longitude, na.rm = TRUE)
) %>%
slice_max(avg_price, n = 3)
nyc_neighborhood_top3 %>%
leaflet(options = leafletOptions(zoomSnap = 0.1)) %>%
addTiles() %>%
setView(lng = -74.00, lat = 40.71, zoom = 12) %>%
addMarkers(~long, ~lat)
print(nyc_neighborhood_top3)
pacman::p_load(tidyverse, lubridate, RColorBrewer, leaflet)
url <- "https://data.insideairbnb.com/united-states/ny/new-york-city/2024-09-04/visualisations/listings.csv"
nyc <- read_csv(url)
nyc <- nyc %>%
rename(
borough = neighbourhood_group,
min_nights = minimum_nights,
num_reviews = number_of_reviews,
count = calculated_host_listings_count,
availability = availability_365
) %>%
mutate(last_review = as_date(last_review)) %>%
filter(availability > 0)
# 1
airbnb_counts_by_room <- nyc %>%
group_by(borough, room_type) %>%
summarise(count = sum(count))
ggplot(airbnb_counts_by_room, aes(x = room_type, y = count, fill = borough)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Number of Airbnbs by Types of Room in NYC",
x = "Types of Rooms",
y = "Number of Airbnbs") +
theme(panel.background = element_blank(),
legend.position = "none")
# 2
airbnb_counts_by_borough <- nyc %>%
group_by(borough) %>%
summarise(count = sum(count)) %>%
arrange(desc(count))
ggplot(airbnb_counts_by_borough, aes(x = reorder(borough, -count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Number of Airbnbs in NYC by Borough",
x = "NYC Borough",
y = "Number of Airbnbs") +
theme(panel.background = element_blank()) +
theme(legend.position = "none")
# 3
airbnb_avg_price_by_borough <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough) %>%
summarise(avg_price = mean(price)) %>%
arrange(avg_price)
ggplot(airbnb_avg_price_by_borough, aes(x = reorder(borough, avg_price), y = avg_price)) +
geom_col(fill = "darkgreen") +
theme_minimal() +
labs(title = "Average Price of Airbnbs by NYC Borough",
x = "NYC Borough",
y = "Average Price") +
theme(panel.background = element_blank()) +
theme(legend.position = "none")
# 4
nyc_neighborhood <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough, neighbourhood) %>%
summarise(avg_price = mean(price)) %>%
arrange(desc(avg_price))
highest_cost <- nyc_neighborhood %>%
group_by(borough) %>%
slice_max(avg_price, n = 1)
lowest_cost <- nyc_neighborhood %>%
group_by(borough) %>%
slice_min(avg_price, n = 1)
highest_avg_cost <- highest_cost %>% slice_max(avg_price, n = 1)
lowest_avg_cost <- lowest_cost %>% slice_min(avg_price, n = 1)
ggplot(nyc_neighborhood, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
geom_bar(stat = "identity", fill = "blue") +
facet_wrap(~ borough, scales = "free") +
coord_flip() +
theme_minimal() +
labs(title = "Average Price by Neighborhood in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank())
# 5
nyc_neighborhood_top5 <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough, neighbourhood) %>%
summarise(avg_price = mean(price)) %>%
slice_max(avg_price, n = 5)
ggplot(nyc_neighborhood_top5, aes(x = reorder(neighbourhood, avg_price), y = avg_price, fill = neighbourhood)) +
geom_bar(stat = "identity") +
facet_wrap(~ borough, scales = "free_x") +
theme_minimal() +
labs(title = "Top 5 Most Expensive Neighborhoods by Borough in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank(),
legend.position = "none",   # Remove legend
axis.text.x = element_text(angle = 0),
strip.text = element_text(size = 10, face = "bold"),
axis.title.y = element_blank())
# 6
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(last_review) == 2024) %>%
filter(!is.na(price))
ggplot(nyc_2024, aes(x = last_review, y = num_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set2") +
theme_minimal() +
labs(title = "Airbnb Reviews", subtitle = "2024",
x = "Date of Last Review",
y = "Number of Reviews") +
theme(panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# 7
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(last_review) == 2024) %>%
filter(!is.na(price))
ggplot(nyc_2024, aes(x = last_review, y = num_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set3") +
theme_minimal() +
facet_wrap(~ borough, nrow = 1) +
labs(title = "Airbnb Reviews", subtitle = "2024",
x = NULL,  # Do not display the X-axis label
y = "Number of Reviews") +
theme(legend.position = "bottom",
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
# 8
nyc_neighborhood_top3 <- nyc %>%
group_by(borough, neighbourhood) %>%
summarise(
avg_price = mean(price, na.rm = TRUE),
lat = mean(latitude, na.rm = TRUE),
long = mean(longitude, na.rm = TRUE)
) %>%
slice_max(avg_price, n = 3)
nyc_neighborhood_top3 %>%
leaflet(options = leafletOptions(zoomSnap = 0.1)) %>%
addTiles() %>%
setView(lng = -74.00, lat = 40.71, zoom = 12) %>%
addMarkers(~long, ~lat)
ggplot(nyc_neighborhood, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
geom_bar(stat = "identity") +
facet_wrap(~ borough, scales = "free") +
coord_flip() +
theme_minimal() +
labs(title = "Average Price by Neighborhood in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank())
ggplot(nyc_neighborhood, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
geom_bar(stat = "identity") +
facet_wrap(~ borough, scales = "free") +
coord_flip() +
theme_minimal() +
labs(title = "Average Price by Neighborhood in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank())
ggplot(nyc_neighborhood, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
geom_bar(stat = "identity", fill = "blue") +
facet_wrap(~ borough, scales = "free") +
coord_flip() +
theme_minimal() +
labs(title = "Average Price by Neighborhood in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank())
# 1 - Bar plot with room types
ggplot(airbnb_counts_by_room, aes(x = room_type, y = count, fill = borough)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
labs(title = "Number of Airbnbs by Types of Room in NYC",
x = "Types of Rooms",
y = "Number of Airbnbs") +
theme(panel.background = element_blank(),
legend.position = "none")
# 2 - Bar plot for Airbnbs by borough
ggplot(airbnb_counts_by_borough, aes(x = reorder(borough, -count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +  # You can change to Set3 colors if needed.
theme_minimal() +
labs(title = "Number of Airbnbs in NYC by Borough",
x = "NYC Borough",
y = "Number of Airbnbs") +
theme(panel.background = element_blank(),
legend.position = "none")
# 3 - Average price by borough (green bar updated)
ggplot(airbnb_avg_price_by_borough, aes(x = reorder(borough, avg_price), y = avg_price)) +
geom_col(fill = "darkgreen") +  # You can change this to Set3 or other palette if needed.
theme_minimal() +
labs(title = "Average Price of Airbnbs by NYC Borough",
x = "NYC Borough",
y = "Average Price") +
theme(panel.background = element_blank(),
legend.position = "none")
# 4 - Average price by neighborhood (using Set3 for consistency)
ggplot(nyc_neighborhood, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
geom_bar(stat = "identity", aes(fill = borough)) +
scale_fill_brewer(palette = "Set3") +
facet_wrap(~ borough, scales = "free") +
coord_flip() +
theme_minimal() +
labs(title = "Average Price by Neighborhood in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank())
# 5 - Top 5 neighborhoods with Set3
ggplot(nyc_neighborhood_top5, aes(x = reorder(neighbourhood, avg_price), y = avg_price, fill = neighbourhood)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Set3") +
facet_wrap(~ borough, scales = "free_x") +
theme_minimal() +
labs(title = "Top 5 Most Expensive Neighborhoods by Borough in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank(),
legend.position = "none",
axis.text.x = element_text(angle = 0),
strip.text = element_text(size = 10, face = "bold"),
axis.title.y = element_blank())
# 6 and 7 already use Set2 and Set3 color palettes, so no change needed.
# 2
airbnb_counts_by_borough <- nyc %>%
group_by(borough) %>%
summarise(count = sum(count)) %>%
arrange(desc(count))
ggplot(airbnb_counts_by_borough, aes(x = reorder(borough, -count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Number of Airbnbs in NYC by Borough",
x = "NYC Borough",
y = "Number of Airbnbs") +
theme(panel.background = element_blank()) +
theme(legend.position = "none")
# 3
airbnb_avg_price_by_borough <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough) %>%
summarise(avg_price = mean(price)) %>%
arrange(avg_price)
ggplot(airbnb_avg_price_by_borough, aes(x = reorder(borough, avg_price), y = avg_price)) +
geom_col(fill = "darkgreen") +
theme_minimal() +
labs(title = "Average Price of Airbnbs by NYC Borough",
x = "NYC Borough",
y = "Average Price") +
theme(panel.background = element_blank()) +
theme(legend.position = "none")
# 4
nyc_neighborhood <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough, neighbourhood) %>%
summarise(avg_price = mean(price)) %>%
arrange(desc(avg_price))
highest_cost <- nyc_neighborhood %>%
group_by(borough) %>%
slice_max(avg_price, n = 1)
lowest_cost <- nyc_neighborhood %>%
group_by(borough) %>%
slice_min(avg_price, n = 1)
highest_avg_cost <- highest_cost %>% slice_max(avg_price, n = 1)
lowest_avg_cost <- lowest_cost %>% slice_min(avg_price, n = 1)
ggplot(nyc_neighborhood, aes(x = reorder(neighbourhood, avg_price), y = avg_price)) +
geom_bar(stat = "identity", fill = "blue") +
facet_wrap(~ borough, scales = "free") +
coord_flip() +
theme_minimal() +
labs(title = "Average Price by Neighborhood in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank())
# 5
nyc_neighborhood_top5 <- nyc %>%
filter(!is.na(price)) %>%
group_by(borough, neighbourhood) %>%
summarise(avg_price = mean(price)) %>%
slice_max(avg_price, n = 5)
ggplot(nyc_neighborhood_top5, aes(x = reorder(neighbourhood, avg_price), y = avg_price, fill = neighbourhood)) +
geom_bar(stat = "identity") +
facet_wrap(~ borough, scales = "free_x") +
theme_minimal() +
labs(title = "Top 5 Most Expensive Neighborhoods by Borough in NYC",
x = "Neighborhood",
y = "Average Price") +
theme(panel.background = element_blank(),
legend.position = "none",
axis.text.x = element_text(angle = 0),
strip.text = element_text(size = 10, face = "bold"),
axis.title.y = element_blank())
# 6
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(last_review) == 2024) %>%
filter(!is.na(price))
ggplot(nyc_2024, aes(x = last_review, y = num_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set2") +
theme_minimal() +
labs(title = "Airbnb Reviews", subtitle = "2024",
x = "Date of Last Review",
y = "Number of Reviews") +
theme(panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# 7
nyc_2024 <- nyc %>%
filter(!is.na(last_review), year(last_review) == 2024) %>%
filter(!is.na(price))
ggplot(nyc_2024, aes(x = last_review, y = num_reviews, size = price, color = borough)) +
geom_point(alpha = 0.3) +
scale_color_brewer(palette = "Set3") +
theme_minimal() +
facet_wrap(~ borough, nrow = 1) +
labs(title = "Airbnb Reviews", subtitle = "2024",
x = NULL,
y = "Number of Reviews") +
theme(legend.position = "bottom",
panel.background = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
# 8
nyc_neighborhood_top3 <- nyc %>%
group_by(borough, neighbourhood) %>%
summarise(
avg_price = mean(price, na.rm = TRUE),
lat = mean(latitude, na.rm = TRUE),
long = mean(longitude, na.rm = TRUE)
) %>%
slice_max(avg_price, n = 3)
nyc_neighborhood_top3 %>%
leaflet(options = leafletOptions(zoomSnap = 0.1)) %>%
addTiles() %>%
setView(lng = -74.00, lat = 40.71, zoom = 12) %>%
addMarkers(~long, ~lat)
