# Load necessary libraries
library(tidyverse)
library(usmap)
library(gridExtra)
# Define the list of organs
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
# Create a list to store the top 5 states for each organ type and the plots
top5_states_list <- lapply(organ_list, function(organ_type) {
# Filter data for the specified organ
organ_data <- organ %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%  # Top 5 states for this organ
left_join(us_states, by = "region")  # Join with state geometry for mapping
# Generate the map plot if data is available
if (nrow(organ_data) > 0) {
plot <- plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("Top 5 States for", organ_type, "Transplants"), fill = "Transplants") +
theme(legend.position = "right")
return(list(organ_type = organ_type, top_states = organ_data, plot = plot))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# Filter out NULL results
top5_states_list <- Filter(Negate(is.null), top5_states_list)
# Extract and display the top 5 states for each organ type
for (entry in top5_states_list) {
cat("\nTop 5 states for", entry$organ_type, "transplants:\n")
print(entry$top_states)
}
# Extract the plots and arrange them in a grid
plots <- lapply(top5_states_list, function(entry) entry$plot)
# Example: Arrange Kidney and Liver maps side by side (as per sample output)
grid.arrange(plots[[1]], plots[[2]], ncol = 2)
# 4
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")  # Adjust if needed
plots <- lapply(organ_list, function(organ_type) {
organ_data <- organ_faceted %>%
filter(Organ == organ_type)
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
plots <- Filter(Negate(is.null), plots)
do.call(grid.arrange, c(plots, ncol = 2))
# Load necessary libraries
library(tidyverse)
library(usmap)
library(gridExtra)
# Define the list of organs
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
# Create a list to store the top 5 states for each organ type and the plots
top5_states_list <- lapply(organ_list, function(organ_type) {
# Filter data for the specified organ
organ_data <- organ %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%  # Top 5 states for this organ
left_join(us_states, by = "region")  # Join with state geometry for mapping
# Generate the map plot if data is available
if (nrow(organ_data) > 0) {
plot <- plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("Top 5 States for", organ_type, "Transplants"), fill = "Transplants") +
theme(legend.position = "right")
return(list(organ_type = organ_type, top_states = organ_data, plot = plot))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# Filter out NULL results
top5_states_list <- Filter(Negate(is.null), top5_states_list)
# Extract and display the top 5 states for each organ type
for (entry in top5_states_list) {
cat("\nTop 5 states for", entry$organ_type, "transplants:\n")
print(entry$top_states)
}
# Extract the plots and arrange them in a grid
plots <- lapply(top5_states_list, function(entry) entry$plot)
# Example: Arrange Kidney and Liver maps side by side (as per sample output)
grid.arrange(plots[[1]], plots[[2]], ncol = 2)
# Define the list of organs
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
# Create a list to store the plots for each organ type
plots <- lapply(organ_list, function(organ_type) {
# Filter data for the specified organ
organ_data <- organ_faceted %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%  # Top 5 states for this organ
left_join(us_states, by = "region")  # Join with state geometry for mapping
# Generate the plot if data is available
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"), fill = "Transplants") +
theme(legend.position = "right")
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# Filter out NULL results and arrange the plots in a grid
plots <- Filter(Negate(is.null), plots)
do.call(grid.arrange, c(plots, ncol = 2))
# Define the list of organs
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
# Create a list to store the plots for each organ type
plots <- lapply(organ_list, function(organ_type) {
# Filter data for the specified organ (without restricting to top 5)
organ_data <- organ_faceted %>%
filter(Organ == organ_type) %>%
left_join(us_states, by = "region")  # Join with state geometry for mapping
# Generate the plot for all states
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"), fill = "Transplants") +
theme(legend.position = "right")
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# 4
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")  # Adjust if needed
plots <- lapply(organ_list, function(organ_type) {
organ_data <- organ_faceted %>%
filter(Organ == organ_type)
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
plots <- Filter(Negate(is.null), plots)
do.call(grid.arrange, c(plots, ncol = 2))
# Load necessary libraries
library(tidyverse)
# Define the list of organs
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
# Create a list to store the top 5 states for each organ type
top5_states_list <- lapply(organ_list, function(organ_type) {
# Filter data for the specified organ
organ_data <- organ %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%  # Top 5 states for this organ
arrange(desc(transplants))  # Arrange in descending order of transplants
# Return the top 5 states for this organ
if (nrow(organ_data) > 0) {
return(list(organ_type = organ_type, top_states = organ_data))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# Filter out NULL results
top5_states_list <- Filter(Negate(is.null), top5_states_list)
# Extract and display the top 5 states for each organ type
for (entry in top5_states_list) {
cat("\nTop 5 states for", entry$organ_type, "transplants:\n")
print(entry$top_states)
}
# Load necessary libraries
library(tidyverse)
library(usmap)
library(gridExtra)
# Define the list of organs
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
# Part 1: Generate the top 5 states for each organ type
top5_states_list <- lapply(organ_list, function(organ_type) {
# Filter data for the specified organ
organ_data <- organ %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%  # Top 5 states for this organ
arrange(desc(transplants))  # Arrange in descending order of transplants
# Return the top 5 states for this organ
if (nrow(organ_data) > 0) {
return(list(organ_type = organ_type, top_states = organ_data))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# Filter out NULL results
top5_states_list <- Filter(Negate(is.null), top5_states_list)
# Extract and display the top 5 states for each organ type
for (entry in top5_states_list) {
cat("\nTop 5 states for", entry$organ_type, "transplants:\n")
print(entry$top_states)
}
# Part 2: Generate the plots for each organ type
plots <- lapply(organ_list, function(organ_type) {
organ_data <- organ_faceted %>%
filter(Organ == organ_type)
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# Filter out NULL plots
plots <- Filter(Negate(is.null), plots)
# Arrange the plots in a grid
do.call(grid.arrange, c(plots, ncol = 2))
# 4
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
top5_states_list <- lapply(organ_list, function(organ_type) {
organ_data <- organ %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%
arrange(desc(transplants))
if (nrow(organ_data) > 0) {
return(list(organ_type = organ_type, top_states = organ_data))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
top5_states_list <- Filter(Negate(is.null), top5_states_list)
for (entry in top5_states_list) {
cat("\nTop 5 states for", entry$organ_type, "transplants:\n")
print(entry$top_states)
}
plots <- lapply(organ_list, function(organ_type) {
organ_data <- organ_faceted %>%
filter(Organ == organ_type)
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
plots <- Filter(Negate(is.null), plots)
do.call(grid.arrange, c(plots, ncol = 2))
# 5
kidneyByYear <- organ %>%
filter(Organ == "Kidney", year != "0") %>%
group_by(year, region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")
ggplot(kidneyByYear) +
geom_sf(aes(geometry = geom, fill = transplants), color = "white") +
scale_fill_distiller(palette = "Spectral") +
facet_wrap(~ year, ncol = 5) +
labs(title = "US Kidney Transplants by Year", fill = "No. of Transplants") +
theme_void() +
theme(legend.position = "right", strip.text = element_text(size = 8))
pacman::p_load(tidyverse, RColorBrewer, socviz, maps, mapproj, usmap, gridExtra, cowplot)
organRaw <- read_csv("data/Donor___State_of_Donation_Service_Area_by_Donation_Year,_Donor_Age,_Organ_2024.csv")
us_pop <- read_csv("data/state_pop.csv")
organ <- organRaw %>%
pivot_longer(cols = Alabama:`Puerto Rico`, names_to = "State", values_to = "transplants") %>%
mutate(region = tolower(State))
us_pop <- us_pop %>%
mutate(region = tolower(state))
organ <- organ %>%
left_join(us_pop, by = "region")
us_states <- us_map("states") %>%
mutate(region = tolower(full))
# 1
totalTransplants <- organ %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")
plot_usmap(data = totalTransplants, values = "transplants", color = "white") +
scale_fill_continuous(type = "viridis", option = "plasma") +
theme(legend.position = "right") +
labs(title = "US Living Organ Donors", fill = "Transplants")
# 2
state_abbreviations <- tibble(
region = tolower(state.name),
state_abb = tolower(state.abb)
)
state_abbreviations <- state_abbreviations %>%
add_row(region = "district of columbia", state_abb = "dc") %>%
add_row(region = "puerto rico", state_abb = "pr")
organ_with_abbr <- organ %>%
left_join(state_abbreviations, by = "region") %>%
mutate(region = state_abb)
organ_with_pop <- organ_with_abbr %>%
left_join(us_pop, by = "region")
popTransplants <- popTransplants %>%
rename(state = region)
plot_usmap(data = popTransplants, values = "per_capita", color = "white") +
scale_fill_distiller(palette = "Spectral", direction = 1, na.value = "grey90") +
theme(legend.position = "right") +
labs(title = "US Organ Transplants by Population", fill = "Per Capita")
# 3
organ_faceted_filtered <- organ %>%
filter(Organ != "All Donors" & !is.na(Organ)) %>%
group_by(region, Organ) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")
plot_usmap(data = organ_faceted_filtered, values = "transplants", color = "white") +
facet_wrap(~Organ) +
scale_fill_distiller(palette = "Spectral") +
theme(legend.position = "right") +
labs(title = "US Organ Transplants by Organ", fill = "No. of Transplants")
# 4
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
top5_states_list <- lapply(organ_list, function(organ_type) {
organ_data <- organ %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%
arrange(desc(transplants))
if (nrow(organ_data) > 0) {
return(list(organ_type = organ_type, top_states = organ_data))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
top5_states_list <- Filter(Negate(is.null), top5_states_list)
for (entry in top5_states_list) {
cat("\nTop 5 states for", entry$organ_type, "transplants:\n")
print(entry$top_states)
}
plots <- lapply(organ_list, function(organ_type) {
organ_data <- organ_faceted %>%
filter(Organ == organ_type)
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
# Assuming you have a data frame `organ` with columns like "Organ", "region", and "transplants"
organ_faceted <- organ %>%
group_by(Organ, region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")  # Ensures state geometry is available for plotting
plots <- lapply(organ_list, function(organ_type) {
organ_data <- organ_faceted %>%
filter(Organ == organ_type)
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
plots <- Filter(Negate(is.null), plots)
do.call(grid.arrange, c(plots, ncol = 2))
# 4
organ_list <- c("Kidney", "Liver", "Heart", "Pancreas", "Lung", "Intestine")
organ_faceted <- organ %>%
group_by(Organ, region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")
top5_states_list <- lapply(organ_list, function(organ_type) {
organ_data <- organ %>%
filter(Organ == organ_type) %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
slice_max(transplants, n = 5, with_ties = FALSE) %>%
arrange(desc(transplants))
if (nrow(organ_data) > 0) {
return(list(organ_type = organ_type, top_states = organ_data))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
top5_states_list <- Filter(Negate(is.null), top5_states_list)
for (entry in top5_states_list) {
cat("\nTop 5 states for", entry$organ_type, "transplants:\n")
print(entry$top_states)
}
plots <- lapply(organ_list, function(organ_type) {
organ_data <- organ_faceted %>%
filter(Organ == organ_type)
if (nrow(organ_data) > 0) {
plot_usmap(data = organ_data, values = "transplants", color = "white") +
scale_fill_distiller(palette = "Spectral") +
labs(title = paste("US", organ_type, "Transplants"))
} else {
message(paste("No data available for", organ_type))
return(NULL)
}
})
plots <- Filter(Negate(is.null), plots)
do.call(grid.arrange, c(plots, ncol = 2))
# 5
kidneyByYear <- organ %>%
filter(Organ == "Kidney", year != "0") %>%
group_by(year, region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")
# Ensure year is in the correct format for filtering
kidneyByYear <- organ %>%
filter(Organ == "Kidney", as.character(year) != "0") %>%  # Convert year to character if needed
group_by(year, region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")
# 2
state_abbreviations <- tibble(
region = tolower(state.name),
state_abb = tolower(state.abb)
)
state_abbreviations <- state_abbreviations %>%
add_row(region = "district of columbia", state_abb = "dc") %>%
add_row(region = "puerto rico", state_abb = "pr")
organ_with_abbr <- organ %>%
left_join(state_abbreviations, by = "region") %>%
mutate(region = state_abb)
organ_with_pop <- organ_with_abbr %>%
left_join(us_pop, by = "region")
popTransplants <- popTransplants %>%
rename(state = region)
# Create the state abbreviation tibble and add missing entries
state_abbreviations <- tibble(
region = tolower(state.name),
state_abb = tolower(state.abb)
)
state_abbreviations <- state_abbreviations %>%
add_row(region = "district of columbia", state_abb = "dc") %>%
add_row(region = "puerto rico", state_abb = "pr")
# Join organ data with state abbreviations and replace region with abbreviations
organ_with_abbr <- organ %>%
left_join(state_abbreviations, by = "region") %>%
mutate(region = state_abb)
# Join with population data
organ_with_pop <- organ_with_abbr %>%
left_join(us_pop, by = "region")
# Define popTransplants after creating organ_with_pop
popTransplants <- organ_with_pop %>%
group_by(region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE), pop = first(pop)) %>%
mutate(per_capita = transplants / pop) %>%
rename(state = region)
# Libraries
library(tidyverse)
library(usmap)
library(RColorBrewer)
library(gridExtra)
library(ggplot2)
# Load Data
organRaw <- read_csv("data/Donor___State_of_Donation_Service_Area_by_Donation_Year,_Donor_Age,_Organ_2024.csv")
us_pop <- read_csv("data/state_pop.csv")
# Prepare organ data and join with population data
organ <- organRaw %>%
pivot_longer(cols = Alabama:`Puerto Rico`, names_to = "State", values_to = "transplants") %>%
mutate(region = tolower(State))
us_pop <- us_pop %>%
mutate(region = tolower(state))
organ <- organ %>%
left_join(us_pop, by = "region")
# Prepare us_states with geometry data
us_states <- us_map("states") %>%
mutate(region = tolower(full))
# 3. Faceted Plot by Organ
organ_faceted_filtered <- organ %>%
filter(Organ != "All Donors" & !is.na(Organ)) %>%  # Filter out "All Donors" and NA values
group_by(region, Organ) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")  # Join with geometry data for plotting
# Faceted Plot
plot3 <- plot_usmap(data = organ_faceted_filtered, values = "transplants", color = "white") +
facet_wrap(~Organ) +
scale_fill_distiller(palette = "Spectral") +
labs(title = "US Organ Transplants by Organ", fill = "No. of Transplants") +
theme(legend.position = "right")
print(plot3)
# 5. Kidney Transplants by Year
# Ensure year is formatted as needed
kidneyByYear <- organ %>%
filter(Organ == "Kidney" & !is.na(year)) %>%
group_by(year, region) %>%
summarize(transplants = sum(transplants, na.rm = TRUE)) %>%
left_join(us_states, by = "region")  # Join with geometry data
# Ensure year column exists
organ <- organ %>%
mutate(year = as.numeric(format(Date, "%Y")))  # Replace 'Date' with your actual date column if it exists
library(tinytex)
install.packages("tinytex")
library(tinytex)
tinytex::uninstall_tinytex() # First, uninstall if there’s a partial installation
