library(fivethirtyeight)
# Assign the dataset to a variable
grads <- college_recent_grads
# View the structure of the data
glimpse(grads)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
# Loading the required libraries
library(tidyverse)
# Assign the dataset to a variable
grads <- college_recent_grads
# View the structure of the data
glimpse(grads)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
# Round unemployment_rate to 3 decimal places
grads_v1 <- grads %>%
mutate(unemployment_rate = round(unemployment_rate, digits = 3))
# Use sprintf to format unemployment_rate as a percentage
grads_v2 <- grads %>%
mutate(unemployment_rate = sprintf("%0.3f%%", unemployment_rate * 100))
# Display top 10 and bottom 10 majors by unemployment rate
top_10_unemployment <- grads %>% head(10)
bottom_10_unemployment <- grads %>% tail(10)
# Calculate the proportion of women and sort in descending order to find highest and lowest
high_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
low_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
head(10)
# Calculate the proportion of women and sort in descending order to find highest and lowest
high_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
# Round unemployment_rate to 3 decimal places
grads_v1 <- grads %>%
mutate(unemployment_rate = round(unemployment_rate, digits = 3))
# View the structure of the data
glimpse(grads)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
View(grads)
# Loading the required libraries
library(tidyverse)
library(fivethirtyeight)
# Assign the dataset to a variable
grads <- college_recent_grads
# View the structure of the data
glimpse(grads)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
View(grads)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
# Sort data by unemployment rate and display rank, major, unemployment_rate
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
View(grads)
# Round unemployment_rate to 3 decimal places
grads_v1 <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate) %>%
mutate(unemployment_rate = round(unemployment_rate, digits = 3))
View(grads_v1)
# Use sprintf to format unemployment_rate as a percentage
grads_v2 <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate) %>%
mutate(unemployment_rate = sprintf("%0.3f%%", unemployment_rate * 100))
View(grads_v2)
grads_v3 <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
View(grads_v3)
grads_v3 <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
# Set the number of digits to display in output
options(digits = 3)
# Display the top 10 rows of grads_v3
grads_v3 %>%
head(10)
View(grads_v3)
# Display top 10 and bottom 10 majors by unemployment rate
top_10_unemployment <- grads %>% head(10)
bottom_10_unemployment <- grads %>% tail(10)
View(bottom_10_unemployment)
View(top_10_unemployment)
# Calculate the proportion of women and sort in descending order to find highest and lowest
high_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
# Create a new variable `prop_women` to calculate the proportion of women to total graduates
grads <- grads %>%
mutate(prop_women = women / total)
# Arrange the grads data by unemployment rate in descending order and select specific columns
grads <- grads %>%
arrange(desc(unemployment_rate)) %>%
select(rank, major, unemployment_rate)
# Create a new variable `prop_women` to calculate the proportion of women to total graduates
grads <- grads %>%
mutate(prop_women = women / total)
colnames(grads)
# Arrange the grads data by unemployment rate in descending order and select the necessary columns
# but ensure 'women' and 'total' are included for later calculations
grads <- grads %>%
arrange(desc(unemployment_rate)) %>%
select(rank, major, unemployment_rate, women, total)
# Arrange the grads data by unemployment rate in descending order and select the necessary columns
# but ensure 'women' and 'total' are included for later calculations
grads <- grads %>%
arrange(desc(unemployment_rate)) %>%
select(rank, major, unemployment_rate, women, total)
# Calculate the proportion of women and sort in descending order to find highest and lowest
high_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
# Calculate the proportion of women and sort in descending order to find highest and lowest
high_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
# Calculate the proportion of women and sort in descending order to find highest and lowest
high_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
colnames(college_recent_grads)
View(grads)
# View the structure of the data
glimpse(grads)
# Calculate the proportion of women and sort in descending order to find highest and lowest
high_women_grads <- grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
# Plot histogram for median income across major categories
college_recent_grads %>%
ggplot(mapping = aes(x = median, fill = major_category)) +
geom_histogram(binwidth = 1000) +
facet_wrap(~ major_category, ncol = 4)
college_recent_grads %>%
ggplot(mapping = aes(x = median, fill = major_category)) +
geom_histogram()
college_recent_grads %>%
ggplot(mapping = aes(x = median, fill = major_category)) +
geom_histogram(binwidth = 1000)
college_recent_grads %>%
ggplot(mapping = aes(x = median, fill = major_category)) +
geom_histogram(binwidth = 5000)
college_recent_grads %>%
summarize(min = min(median), max = max(median),
mean = mean(median), med = median(median),
sd = sd(median),
q1 = quantile(median, probs = 0.25),
q3 = quantile(median, probs = 0.75))
college_recent_grads %>%
ggplot(mapping = aes(x = median, fill = major_category)) +
geom_histogram(binwidth = 5000) +
facet_wrap( ~ major_category, ncol = 4)
# Summarize the median income by major category and arrange the results
college_recent_grads %>%
group_by(major_category) %>%
summarise(median_income = median(median)) %>%
arrange(median_income)
college_recent_grads %>%
group_by(major_category) %>%
summarise(median_income = median(median)) %>%
arrange(median_income)
women_grads_median <- college_recent_grads %>%
select(major, major_category, women, total, median) %>%
mutate(prop_women = women / total)
View(women_grads_median)
NA_values <- women_grads_median %>%
filter(is.na(prop_women))
women_grads_median <- women_grads_median %>%
na.omit()
NA_values <- women_grads_median %>%
filter(is.na(prop_women))
women_grads_median %>%
ggplot(mapping = aes(x = prop_women, y = median, color = major_category)) +
geom_point() +
scale_color_manual(values = color_names) +
ggtitle("Scatterplot of Median Income vs Proportion of Women by Major Category") +
xlab("Proportion of Women") +
ylab("Median Income")
num_categories <- women_grads_median %>%
group_by(major_category) %>%
count()
color_names <- colors()[1:nrow(num_categories)]
women_grads_median %>%
ggplot(mapping = aes(x = prop_women, y = median, color = major_category)) +
geom_point() +
scale_color_manual(values = color_names) +
ggtitle("Scatterplot of Median Income vs Proportion of Women by Major Category") +
xlab("Proportion of Women") +
ylab("Median Income")
# Create a new data frame `women_grads_median` that selects appropriate variables and calculates the proportion of women
women_grads_median <- college_recent_grads %>%
select(major, major_category, women, total, median) %>%
mutate(prop_women = women / total)
# Remove any NA values from the dataset
women_grads_median <- women_grads_median %>%
na.omit()
# Determine the number of unique major categories
num_categories <- n_distinct(women_grads_median$major_category)
# Create a vector of distinct color names (use the first `num_categories` colors from the color list)
color_names <- colors()[1:num_categories]
# Scatterplot: Plot the median income vs. the proportion of women, colored by major category
women_grads_median %>%
ggplot(mapping = aes(x = prop_women, y = median, color = major_category)) +
geom_point() +
scale_color_manual(values = color_names) +  # Apply the distinct colors to the plot
ggtitle("Scatterplot of Median Income vs Proportion of Women by Major Category") +
xlab("Proportion of Women") +
ylab("Median Income")
# Create a vector of distinct color names (use the first `num_categories` colors from the color list)
color_names <- c("red", "blue", "green", "orange", "purple", "pink", "yellow", "brown",
"cyan", "magenta", "gold", "darkgreen", "darkblue", "salmon", "gray", "turquoise")
# Scatterplot: Plot the median income vs. the proportion of women, colored by major category
women_grads_median %>%
ggplot(mapping = aes(x = prop_women, y = median, color = major_category)) +
geom_point() +
scale_color_manual(values = color_names) +  # Apply the distinct colors to the plot
ggtitle("Scatterplot of Median Income vs Proportion of Women by Major Category") +
xlab("Proportion of Women") +
ylab("Median Income")
correlation <- cor(women_grads_median_clean$prop_women, women_grads_median_clean$median)
correlation <- cor(women_grads_median$prop_women, women_grads_median$median)
NA_values <- women_grads_median %>%
filter(is.na(prop_women))
View(NA_values)
#How do the distributions of median income compare across major categories?
women_grads_median <- college_recent_grads %>%
select(major, major_category, women, total, median) %>%
mutate(prop_women = women / total)
NA_values <- women_grads_median %>%
filter(is.na(prop_women))
View(NA_values)
women_grads_median <- women_grads_median %>%
na.omit()
NA_values <- women_grads_median %>%
filter(is.na(prop_women))
grads_v3 %>%
head(10)
#Which major has the highest percentage of women? Which has the lowest?
high_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
low_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
head(10)
View(high_women_grads)
#Which major has the highest percentage of women? Which has the lowest?
high_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
head(10)
View(high_women_grads)
#Which major has the highest percentage of women? Which has the lowest?
high_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
select(major) %>%
head(10)
#Which major has the highest percentage of women? Which has the lowest?
high_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
select(major) %>%
head(10)
#Which major has the highest percentage of women? Which has the lowest?
high_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
select(major) %>%
head(10)
#Which major has the highest percentage of women? Which has the lowest?
high_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
select(major) %>%
head(10)
View(high_women_grads)
low_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
select(major) %>%
head(10)
low_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
select(major) %>%
head(10)
low_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
select(major) %>%
head(10)
low_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
select(major) %>%
head(10)
View(high_women_grads)
low_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
select(major) %>%
head(10)
View(low_women_grads)
library(tidyverse)
library(fivethirtyeight)
grads <- college_recent_grads
glimpse(grads)
#Which major has the lowest unemployment rate? Which has the highest?
grads <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
grads_v1 <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate) %>%
mutate(unemployment_rate = round(unemployment_rate, digits = 3))
grads_v2 <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate) %>%
mutate(unemployment_rate = sprintf("%0.3f%%", unemployment_rate * 100))
grads_v3 <- grads %>%
arrange(unemployment_rate) %>%
select(rank, major, unemployment_rate)
options(digits = 3)
grads_v3 %>%
head(10)
top_10_unemployment <- grads %>% head(10)
bottom_10_unemployment <- grads %>% tail(10)
#Which major has the highest percentage of women? Which has the lowest?
high_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(desc(prop_women)) %>%
select(major) %>%
head(10)
low_women_grads <- college_recent_grads %>%
mutate(prop_women = women / total) %>%
arrange(prop_women) %>%
select(major) %>%
head(10)
college_recent_grads %>%
ggplot(mapping = aes(x = median, fill = major_category)) +
geom_histogram(binwidth = 5000)
college_recent_grads %>%
summarize(min = min(median), max = max(median),
mean = mean(median), med = median(median),
sd = sd(median),
q1 = quantile(median, probs = 0.25),
q3 = quantile(median, probs = 0.75))
college_recent_grads %>%
ggplot(mapping = aes(x = median, fill = major_category)) +
geom_histogram(binwidth = 5000) +
facet_wrap( ~ major_category, ncol = 4)
college_recent_grads %>%
group_by(major_category) %>%
summarise(median_income = median(median)) %>%
arrange(median_income)
#How do the distributions of median income compare across major categories?
women_grads_median <- college_recent_grads %>%
select(major, major_category, women, total, median) %>%
mutate(prop_women = women / total)
correlation <- cor(women_grads_median$prop_women, women_grads_median$median)
NA_values <- women_grads_median %>%
filter(is.na(prop_women))
women_grads_median <- women_grads_median %>%
na.omit()
num_categories <- n_distinct(women_grads_median$major_category)
color_names <- c("red", "blue", "green", "orange", "purple", "pink", "yellow", "brown",
"cyan", "magenta", "gold", "darkgreen", "darkblue", "salmon", "gray", "turquoise")
women_grads_median %>%
ggplot(mapping = aes(x = prop_women, y = median, color = major_category)) +
geom_point() +
scale_color_manual(values = color_names) +  # Apply the distinct colors to the plot
ggtitle("Scatterplot of Median Income vs Proportion of Women by Major Category") +
xlab("Proportion of Women") +
ylab("Median Income")
View(high_women_grads)
correlation <- cor(women_grads_median$prop_women, women_grads_median$median)
women_grads_median <- women_grads_median %>%
na.omit()
View(NA_values)
