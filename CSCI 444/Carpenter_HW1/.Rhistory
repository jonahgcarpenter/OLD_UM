# Load necessary libraries
library(tidyverse)
library(purrr)
# Define the path to the data folder
data_path <- "french_fries_data"
# Use map_dfr to read all CSV files in the folder
ff <- map_dfr(list.files(data_path, pattern = "*.csv", full.names = TRUE),
~ read_csv(.x, col_names = FALSE))
# Assign column names to the data frame
colnames(ff) <- c("subject", "potatoey", "buttery", "grassy", "rancid", "painty")
# Plot the 'potatoey' results using a bar chart
ggplot(ff, aes(x = subject, y = potatoey)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Potatoey Flavor Scores", x = "Subject", y = "Potatoey Score") +
theme_minimal()
# Now with the ColorBrewer palette 'Set3'
color_palette <- RColorBrewer::brewer.pal(n = length(unique(ff$subject)), "Set3")
# Define the path to the data folder
data_path <- "ff_data"
View(ff)
# Load necessary libraries
library(tidyverse)
library(purrr)
# Define the path to the ff_data folder
data_path <- "ff_data"
# Use map_dfr to read all CSV files in the folder
ff <- map_dfr(list.files(data_path, pattern = "*.csv", full.names = TRUE),
~ read_csv(.x, col_names = FALSE))
# Assign column names to the data frame
colnames(ff) <- c("subject", "potatoey", "buttery", "grassy", "rancid", "painty")
# Plot the 'potatoey' results using a bar chart without filling bars
ggplot(ff, aes(x = subject, y = potatoey)) +
geom_bar(stat = "identity") +
labs(title = "Potatoey Flavor Scores", x = "Subject", y = "Potatoey Score") +
theme_minimal()
# Determine the number of colors and fill bars using the ColorBrewer palette 'Set3'
color_palette <- RColorBrewer::brewer.pal(n = length(unique(ff$subject)), "Set3")
# Determine the number of colors and fill bars using the ColorBrewer palette 'Set3'
color_palette <- RColorBrewer::brewer.pal(n = length(unique(ff$subject)), "Set3")
View(ff)
# Determine the number of colors and fill bars using the ColorBrewer palette 'Set3'
color_palette <- RColorBrewer::brewer.pal(n = length(unique(ff$subject)), "Set3")
# Determine the number of colors and fill bars using the ColorBrewer palette 'Set3'
color_palette <- RColorBrewer::brewer.pal(n = length(unique(ff$subject)), "Set3")
# Plot the 'potatoey' results using a bar chart without filling bars
ggplot(ff, aes(x = subject, y = potatoey)) +
geom_bar(stat = "identity") +
labs(title = "Potatoey Flavor Scores", x = "Subject", y = "Potatoey Score") +
theme_minimal()
View(ff)
print(ff)
# Use the ColorBrewer Set3 palette (assuming 12 subjects)
color_palette <- brewer.pal(12, "Set3")
View(ff)
# Load necessary libraries
library(tidyverse)
library(RColorBrewer)
# Define the path to the ff_data folder
data_path <- "ff_data"
# Use map_dfr to read all CSV files in the folder
ff <- map_dfr(list.files(data_path, pattern = "*.csv", full.names = TRUE),
~ read_csv(.x, col_names = FALSE))
# Assign column names to the data frame
colnames(ff) <- c("subject", "potatoey", "buttery", "grassy", "rancid", "painty")
# Convert the 'subject' column to a factor to treat it as a categorical variable
ff$subject <- factor(ff$subject)
View(ff)
# Use the ColorBrewer Set3 palette (assuming 12 subjects)
color_palette <- brewer.pal(12, "Set3")
# Plot with the ColorBrewer palette 'Set3'
ggplot(ff, aes(x = subject, y = potatoey, fill = subject)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = color_palette) +
labs(title = "Potatoey Flavor Scores with ColorBrewer Set3", x = "Subject", y = "Potatoey Score") +
theme_minimal()
# Load necessary libraries
library(tidyverse)
library(readxl)
# Set directory to the data folder
setwd("data")
# Copy and paste the names vector from the text file
names <- c("Name", "Age", "Gender", ..., "Personality_Type")
# Load the names from the names.txt file
names <- c("Q1", "Q2", "Q3", ..., "Q73", "E", "N", "F", "J", "Personality_Type")
# Create the names vector for 73 questions, followed by the 4 personality traits and the Personality_Type column
names <- c(paste0("Q", 1:73), "E", "N", "F", "J", "Personality_Type")
# Get a list of all .xlsx files in the directory
files <- list.files(pattern = "\\.xlsx$")
names <- c("Q1", "Q2", "Q3", "Q4", "Q5", "Q6", "Q7", "Q8", "Q9", "Q10", "Q11", "Q12", "Q13", "Q14", "Q15", "Q16", "Q17", "Q18", "Q19", "Q20", "Q21", "Q22", "Q23", "Q24", "Q25", "Q26", "Q27", "Q28", "Q29", "Q30", "Q31", "Q32", "Q33", "Q34", "Q35", "Q36", "Q37", "Q38", "Q39", "Q40", "Q41", "Q42", "Q43", "Q44", "Q45", "Q46", "Q47", "Q48", "Q49", "Q50", "Q51", "Q52", "Q53", "Q54", "Q55", "Q56", "Q57", "Q58", "Q59", "Q60", "Q61", "Q62", "Q63", "Q64", "Q65", "Q66", "Q67", "Q68", "Q69", "Q70", "EI", "SN", "TF", "JP", "Personality_Type")
# Get a list of all .xlsx files in the directory
files <- list.files(pattern = "\\.xlsx$")
# Use map_dfr to read each file into a data frame and bind them row-wise
data <- map_dfr(files, ~ read_excel(.x, col_names = FALSE))
# Set the column names
colnames(data) <- names
View(data)
# Clean the data by replacing missing values with "A"
data <- data %>%
replace(is.na(.), "A")
View(data)
# Create a bar plot to visualize the Personality_Type distribution
ggplot(data, aes(x = Personality_Type, fill = Personality_Type)) +
geom_bar() +
labs(title = "Distribution of Personality Types in Class", x = "Personality Type", y = "Count") +
theme_minimal()
View(data)
View(data)
View(data)
view(data)
str(data)
# Get a list of all .xlsx files in the directory
files <- list.files(pattern = "\\.xlsx$")
# Use map_dfr to read each file into a data frame and bind them row-wise
data <- map_dfr(files, ~ read_excel(.x, col_names = FALSE))
View(data)
# Set the column names
colnames(data) <- names
# Clean the data by replacing missing values with "A"
data <- data %>%
replace(is.na(.), "A")
# Create a bar plot to visualize the Personality_Type distribution
ggplot(data, aes(x = Personality_Type, fill = Personality_Type)) +
geom_bar() +
labs(title = "Distribution of Personality Types in Class", x = "Personality Type", y = "Count") +
theme_minimal()
# Get a list of all .xlsx files in the directory
files <- list.files(pattern = "\\.xlsx$")
# Use map_dfr to read each file into a data frame and bind them row-wise
data <- map_dfr(files, ~ read_excel(.x, col_names = FALSE))
# Set the column names
colnames(data) <- names
# Replace missing values in question columns only (Q1 to BR)
data[, 1:70] <- data[, 1:70] %>% replace(is.na(.), "A")
View(data)
# Create a bar plot to visualize the Personality_Type distribution
ggplot(data, aes(x = Personality_Type, fill = Personality_Type)) +
geom_bar() +
labs(title = "Distribution of Personality Types in Class", x = "Personality Type", y = "Count") +
theme_minimal()
View(data)
# Get a list of all .xlsx files in the directory
files <- list.files(pattern = "\\.xlsx$")
# Use map_dfr to read each file into a data frame and bind them row-wise
data <- map_dfr(files, ~ read_excel(.x, col_names = FALSE))
# Set the column names
colnames(data) <- names
# Replace missing values in question columns only (Q1 to BR)
data[, 1:70] <- data[, 1:70] %>% replace(is.na(.), "A")
# Create a bar plot to visualize the Personality_Type distribution
ggplot(data, aes(x = Personality_Type, fill = Personality_Type)) +
geom_bar() +
labs(title = "Distribution of Personality Types in Class", x = "Personality Type", y = "Count") +
theme_minimal()
# Use map_dfr to read each file into a data frame and bind them row-wise
data <- map_dfr(files, ~ read_excel(.x, col_names = FALSE))
# Set the column names
colnames(data) <- names
# Replace missing values in question columns only (Q1 to BR)
data[, 1:70] <- data[, 1:70] %>% replace(is.na(.), "A")
# Create a bar plot to visualize the Personality_Type distribution
ggplot(data, aes(x = Personality_Type, fill = Personality_Type)) +
geom_bar() +
labs(title = "Distribution of Personality Types in Class", x = "Personality Type", y = "Count") +
theme_minimal()
str(data)
# Wrangling and Tidy the data
responses <- data %>%
pivot_longer(Q1:Q70, names_to="question", values_to="answer") %>%
select(question, answer)
View(responses)
# Count the occurrences of each answer for each question
responses_count <- responses %>%
group_by(question, answer) %>%
summarise(n = n(), .groups = 'drop')
View(responses_count)
# Create the bar plot for question and answer counts
ggplot(responses_count, aes(x = answer, y = n, fill = answer)) +
geom_bar(stat = "identity") +  # Use stat="identity" because we want the bar heights to reflect actual counts
facet_wrap(~ question, ncol = 7) +
labs(title = "Myers Briggs Results", subtitle = "Jonah's MBTI Responses") +
theme_minimal()
# Add a rank column to order the questions numerically
responses_alt <- responses %>%
mutate(rank = as.numeric(str_sub(question, 2))) %>%
group_by(question, answer) %>%
summarise(n = n(), .groups = 'drop') %>%
arrange(rank, answer)
# Create the rank column first, then group by and summarize
responses_alt <- responses %>%
mutate(rank = as.numeric(str_sub(question, 2))) %>%  # Create the rank column
group_by(question, answer, rank) %>%  # Group by question, answer, and rank
summarise(n = n(), .groups = 'drop') %>%  # Summarize the count of answers
arrange(rank, answer)  # Arrange by rank and answer
# Replot the data by rank
ggplot(responses_alt, aes(x = answer, y = n, fill = answer)) +
geom_bar(stat = "identity") +
facet_wrap(~ rank, ncol = 7) +
labs(title = "Myers Briggs Results Ordered by Rank", subtitle = "Jonah's MBTI Responses") +
theme_minimal()
# Find questions where the answer count is close to the minimum
minority <- responses_count %>%
filter(n <= min(.$n) + 1)
# Find questions where the answer count is close to the maximum
majority <- responses_count %>%
filter(n >= max(.$n) - 1)
# Summarize total counts of A and B across all questions
answer_popularity <- responses_alt %>%
group_by(answer) %>%
summarise(total = sum(n))
# Print the result to check which answer is more popular
print(answer_popularity)
View(minority)
View(majority)
# Find questions where the answer count is close to the minimum
minority <- responses_count %>%
filter(n <= min(.$n) + 2)
# Find questions where the answer count is close to the maximum
majority <- responses_count %>%
filter(n >= max(.$n) - 2)
View(majority)
View(minority)
View(majority)
ggplot(responses_alt, aes(x = answer, y = n, fill = answer)) +
geom_bar(stat = "identity") +
facet_wrap(~ rank, ncol = 7) +
labs(title = "Myers Briggs Results Ordered by Rank", subtitle = "Jonah Carpenter") +
theme_minimal()
ggplot(data, aes(x = Personality_Type, fill = Personality_Type)) +
geom_bar() +
labs(title = "Distribution of Personality Types in Class", x = "Personality Type", y = "Count") +
theme_minimal()
ggplot(data, aes(x = Personality_Type, fill = Personality_Type)) +
geom_bar() +
labs(title = "Personality Types in Class", x = "Personality Type", y = "Count") +
theme_minimal()
# Load necessary libraries
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
# Step 1: Scrape data from IMDB
url <- 'https://www.imdb.com/chart/boxoffice' # Replace with the actual URL if different
webpage <- read_html(url)
# Extract titles, weekend gross, total gross, and number of weeks
titles <- webpage %>% html_nodes(".titleColumn a") %>% html_text()
gross_data <- webpage %>% html_nodes(".ratingColumn") %>% html_text(trim = TRUE)
View(webpage)
# Step 2: Clean and convert the data
gross_data_clean <- str_squish(gross_data)
weekend_gross <- gross_data_clean[seq(1, length(gross_data_clean), 2)]
gross <- gross_data_clean[seq(2, length(gross_data_clean), 2)]
# Remove the '$' and 'M' symbols, and convert to numeric
weekend_gross_numeric <- as.numeric(str_replace_all(weekend_gross, "[$M]", ""))
gross_numeric <- as.numeric(str_replace_all(gross, "[$M]", ""))
# Assume the weeks data is part of the second list (adjust if needed)
weeks <- webpage %>% html_nodes(".weeksColumn") %>% html_text() %>% as.numeric()
# Step 3: Create a tibble
topGrossingFilms <- tibble(
Title = titles,
Weekend_Gross = weekend_gross_numeric,
Gross = gross_numeric,
Number_of_weeks = weeks
)
# Step 1: Scrape data from IMDB top box office chart
url <- 'https://www.imdb.com/chart/boxoffice' # Adjust the URL if necessary
page <- read_html(url)
# Step 2: Extract movie titles using CSS selectors
titles <- page %>%
html_nodes(".titleColumn a") %>%
html_text()
# Step 3: Extract weekend gross, gross, and weeks
gross_data <- page %>%
html_nodes(".ratingColumn") %>%
html_text()
# Clean up data (remove white spaces and format it)
gross_data_clean <- str_squish(gross_data)
# Extract weekend gross and total gross (assuming specific order in the data)
weekend_gross <- gross_data_clean[seq(1, length(gross_data_clean), 2)]
