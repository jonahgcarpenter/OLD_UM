platform <- url_page %>%
html_nodes(".c-gameDetails_Platforms ul") %>%
html_text() %>%
str_squish() %>%
str_split("\n") %>%
unlist() %>%
str_trim() %>%
paste(collapse = ", ")
# Step 7 - Scrape genre information
genre <- url_page %>%
html_nodes(xpath = "//span[text()='Genres:']/following-sibling::ul//span[@class='c-globalButton_label']") %>%  # Refine the XPath to target the genre span
html_text() %>%
str_trim()
}
View(videoGames_2024)
# Step 9 - Create a tibble with the collected data
videoGames_2024 <- tibble(
title = titles_clean,
metascore = metascore,
userscore = userscore,
platforms = platform,
genre = genre
)
# Load necessary libraries
library(tidyverse)
library(rvest)
library(stringr)
# Step 1 - Read HTML structures from four pages
page1 <- read_html("https://www.metacritic.com/browse/game/all/all/current-year/metascore/?page=1")
page2 <- read_html("https://www.metacritic.com/browse/game/all/all/current-year/metascore/?page=2")
page3 <- read_html("https://www.metacritic.com/browse/game/all/all/current-year/metascore/?page=3")
page4 <- read_html("https://www.metacritic.com/browse/game/all/all/current-year/metascore/?page=4")
# Combine pages into one
pages <- list(page1, page2, page3, page4)
# Step 2 - Inspect XML structure for the first page
xml_structure(page1)
# Step 3 - Extract titles and URLs
title1 <- page1 %>% html_nodes("h3 span:nth-of-type(2)") %>% html_text(trim = TRUE)
title2 <- page2 %>% html_nodes("h3 span:nth-of-type(2)") %>% html_text(trim = TRUE)
title3 <- page3 %>% html_nodes("h3 span:nth-of-type(2)") %>% html_text(trim = TRUE)
title4 <- page4 %>% html_nodes("h3 span:nth-of-type(2)") %>% html_text(trim = TRUE)
# Combine titles into one vector
titles <- c(title1, title2, title3, title4)
# Extract URLs from each page
url1 <- page1 %>% html_nodes(".c-finderProductCard a") %>% html_attr("href")
url2 <- page2 %>% html_nodes(".c-finderProductCard a") %>% html_attr("href")
url3 <- page3 %>% html_nodes(".c-finderProductCard a") %>% html_attr("href")
url4 <- page4 %>% html_nodes(".c-finderProductCard a") %>% html_attr("href")
# Combine URLs into one vector
urls <- c(url1, url2, url3, url4)
# Step 4 - Clean titles and URLs
titles_clean <- str_trim(titles)
urls_clean <- paste0("https://www.metacritic.com", urls)
# Step 5 - Get metascore and userscore for the first game
url_page <- read_html(urls_clean[1])
scores <- url_page %>%
html_nodes("span[data-v-e408cafe]") %>%
html_text() %>%
as.numeric()
one_metascore <- scores[1]
one_userscore <- scores[2]
# Step 6 - Scrape platform information
one_platform <- url_page %>%
html_nodes(".c-gameDetails_Platforms ul") %>%
html_text() %>%
str_squish() %>%
str_split("\n") %>%
unlist() %>%
str_trim() %>%
paste(collapse = ", ")
# Step 7 - Scrape genre information
one_genre <- url_page %>%
html_nodes(xpath = "//span[text()='Genres:']/following-sibling::ul//span[@class='c-globalButton_label']") %>%  # Refine the XPath to target the genre span
html_text() %>%
str_trim()
# Step 8 - Scrape data for all games
metascore <- c()
userscore <- c()
platform <- c()
genre <- c()
# Loop through each URL to scrape the data
for (oneURL in urls_clean) {
url_page <- read_html(oneURL)
# Step 5 - Get metascore and userscore
scores <- url_page %>%
html_nodes("span[data-v-e408cafe]") %>%
html_text() %>%
str_trim() %>%
as.numeric()
if (length(scores) >= 2) {
metascore <- c(metascore, scores[1])
userscore <- c(userscore, scores[2])
} else {
metascore <- c(metascore, NA)
userscore <- c(userscore, NA)
}
# Step 6 - Scrape platform information (remove first entry which is not a platform)
platform <- url_page %>%
html_nodes(".c-gameDetails_Platforms ul") %>%
html_text() %>%
str_squish() %>%
str_split("\n") %>%
unlist() %>%
str_trim() %>%
paste(collapse = ", ")
# Step 7 - Scrape genre information
genre <- url_page %>%
html_nodes(xpath = "//span[text()='Genres:']/following-sibling::ul//span[@class='c-globalButton_label']") %>%  # Refine the XPath to target the genre span
html_text() %>%
str_trim()
}
# Step 9 - Create a tibble with the collected data
videoGames_2024 <- tibble(
title = titles_clean,
metascore = metascore,
userscore = userscore,
platforms = platform,
genre = genre
)
View(videoGames_2024)
print(scores)
View(videoGames_2024)
print(platform)
print(genre)
# Step 8 - Scrape data for all games
metascore <- c()
userscore <- c()
platform <- c()
genre <- c()
# Loop through each URL to scrape the data
for (oneURL in urls_clean) {
url_page <- read_html(oneURL)
# Step 5 - Get metascore and userscore
scores <- url_page %>%
html_nodes("span[data-v-e408cafe]") %>%
html_text() %>%
str_trim() %>%
as.numeric()
if (length(scores) >= 2) {
metascore <- c(metascore, scores[1])
userscore <- c(userscore, scores[2])
} else {
metascore <- c(metascore, NA)
userscore <- c(userscore, NA)
}
# Step 6 - Scrape platform information (append instead of overwrite)
platforms_data <- url_page %>%
html_nodes(".c-gameDetails_Platforms ul") %>%
html_text() %>%
str_squish() %>%
str_split("\n") %>%
unlist() %>%
str_trim() %>%
paste(collapse = ", ")
platform <- c(platform, platforms_data)  # Append to platform vector
# Step 7 - Scrape genre information (append instead of overwrite)
genre_data <- url_page %>%
html_nodes(xpath = "//span[text()='Genres:']/following-sibling::ul//span[@class='c-globalButton_label']") %>%  # Refine the XPath to target the genre span
html_text() %>%
str_trim() %>%
paste(collapse = ", ")
genre <- c(genre, genre_data)  # Append to genre vector
}
# Step 9 - Create a tibble with the collected data
videoGames_2024 <- tibble(
title = titles_clean,
metascore = metascore,
userscore = userscore,
platforms = platform,
genre = genre
)
View(videoGames_2024)
# Step 10 - Create a data folder and write the tibble to a CSV file
if (!dir.exists("data")) {
dir.create("data")
}
write_csv(videoGames_2024, "data/metacritics_2024.csv")
# Step 11 - Read in the data
videoGames <- read_csv("data/metacritics_2024.csv")
# Step 12 - Identify NA values for each variable
na_title <- videoGames %>% filter(is.na(title))
na_metascore <- videoGames %>% filter(is.na(metascore))
na_userscore <- videoGames %>% filter(is.na(userscore))
na_platform <- videoGames %>% filter(is.na(platforms))
na_genre <- videoGames %>% filter(is.na(genre))
# Step 13 - Create a scatterplot of user scores vs metascores and calculate correlation coefficient
ggplot(videoGames, aes(x = metascore, y = userscore)) +
geom_point() +
labs(title = "Metascore vs Userscore", x = "Metascore", y = "Userscore")
# Calculate correlation coefficient between metascore and userscore
correlation <- cor(videoGames$metascore, videoGames$userscore, use = "complete.obs")
cat("Correlation coefficient:", correlation, "\n")
# Step 14 - Filter for games with high user scores but low metascores
outliers <- videoGames %>%
filter(userscore >= 8, metascore <= 81, !is.na(metascore), !is.na(userscore))
# Print the outlier games
print(outliers)
# Step 12 - Identify NA values for each variable
na_title <- videoGames %>% filter(is.na(title))
na_metascore <- videoGames %>% filter(is.na(metascore))
na_userscore <- videoGames %>% filter(is.na(userscore))
na_platform <- videoGames %>% filter(is.na(platforms))
na_genre <- videoGames %>% filter(is.na(genre))
View(na_userscore)
View(na_userscore)
View(na_userscore)
View(na_userscore)
# Calculate correlation coefficient between metascore and userscore
correlation <- cor(videoGames$metascore, videoGames$userscore, use = "complete.obs")
cat("Correlation coefficient:", correlation, "\n")
# Step 14 - Filter for games with high user scores but low metascores
outliers <- videoGames %>%
filter(userscore >= 8, metascore <= 81, !is.na(metascore), !is.na(userscore))
print(outliers)
# Load required libraries
library(tidyverse)
library(rvest)
# Load the CSV file into a data frame
videoGames <- read_csv("data/metacritics_2024.csv")
View(videoGames)
# Inspect the data
glimpse(videoGames)
# PART B: Wrangling Platforms
# Replace '\n' with commas, remove whitespace, and clean up double commas
videoGames$platforms <- videoGames$platforms %>%
str_replace_all("\\n", ",") %>%
str_trim() %>%
str_replace_all(",,", ",")
# Count the number of platforms by counting commas + 1
videoGames <- videoGames %>%
mutate(num_platforms = str_count(platforms, ",") + 1)
# Parse platforms into individual columns
videoGames <- videoGames %>%
separate(platforms, into = paste0("platform", 1:10), sep = ",", fill = "right") %>%
pivot_longer(cols = starts_with("platform"), names_to = "platformNum", values_to = "platform", values_drop_na = TRUE)
# Answer the exercises:
# 1. What games have 2 or more platforms?
multi_platform_games <- videoGames %>%
count(title) %>%
filter(n > 1)
ggplot(multi_platform_games, aes(x = reorder(title, n), fill = factor(n))) +
geom_bar() +
coord_flip() +
guides(fill = "none")
# 2. What are the top three genres?
top_genres <- videoGames %>%
count(genre) %>%
slice_max(n, n = 3)
ggplot(top_genres, aes(x = reorder(genre, n), y = n)) +
geom_col() +
coord_flip() +
guides(fill = "none")
# 3. Which platform has the least games?
platform_counts <- videoGames %>%
count(platform) %>%
arrange(n)
ggplot(platform_counts, aes(x = reorder(platform, n), y = n)) +
geom_col() +
coord_flip() +
guides(fill = "none")
# 4. Which of the top 6 genres are found on at least 6 platforms?
top_6_genres <- videoGames %>%
count(genre) %>%
slice_max(n, n = 6)
platform_genre <- videoGames %>%
filter(genre %in% top_6_genres$genre) %>%
count(genre, platform) %>%
filter(n >= 6)
ggplot(platform_genre, aes(x = reorder(platform, n), y = n, fill = genre)) +
geom_col() +
facet_wrap(~platform) +
coord_flip() +
guides(fill = "none")
# 5. Most popular genre by user score
user_popular_genre <- videoGames %>%
group_by(genre) %>%
summarize(mean_userscore = mean(userscore, na.rm = TRUE)) %>%
arrange(desc(mean_userscore))
ggplot(user_popular_genre, aes(x = reorder(genre, mean_userscore), y = mean_userscore)) +
geom_col() +
coord_flip() +
guides(fill = "none")
# 6. Most popular genre by critic score
critic_popular_genre <- videoGames %>%
group_by(genre) %>%
summarize(mean_metascore = mean(metascore, na.rm = TRUE)) %>%
arrange(desc(mean_metascore))
ggplot(critic_popular_genre, aes(x = reorder(genre, mean_metascore), y = mean_metascore)) +
geom_col() +
coord_flip() +
guides(fill = "none")
View(multi_platform_games)
# Answer the exercises:
# 1. What games have 2 or more platforms?
multi_platform_games <- videoGames %>%
count(title) %>%
filter(n > 1)
# Answer the exercises:
# 1. What games have 2 or more platforms?
multi_platform_games <- videoGames %>%
count(title) %>%
filter(n > 1)
ggplot(multi_platform_games, aes(x = reorder(title, n), fill = factor(n))) +
geom_bar() +
coord_flip() +
guides(fill = "none")
# 2. What are the top three genres?
top_genres <- videoGames %>%
count(genre) %>%
slice_max(n, n = 3)
ggplot(top_genres, aes(x = reorder(genre, n), y = n)) +
geom_col() +
coord_flip() +
guides(fill = "none")
# 3. Which platform has the least games?
platform_counts <- videoGames %>%
count(platform) %>%
arrange(n)
ggplot(platform_counts, aes(x = reorder(platform, n), y = n)) +
geom_col() +
coord_flip() +
guides(fill = "none")
# 4. Which of the top 6 genres are found on at least 6 platforms?
top_6_genres <- videoGames %>%
count(genre) %>%
slice_max(n, n = 6)
platform_genre <- videoGames %>%
filter(genre %in% top_6_genres$genre) %>%
count(genre, platform) %>%
filter(n >= 6)
ggplot(platform_genre, aes(x = reorder(platform, n), y = n, fill = genre)) +
geom_col() +
facet_wrap(~platform) +
coord_flip() +
guides(fill = "none")
# Load the CSV file into a data frame
videoGames <- read_csv("data/metacritics_2024.csv")
# PART B: Wrangling Platforms
videoGames$platforms <- videoGames$platforms %>%
str_replace_all("\\n", ",") %>%
str_trim() %>%
str_replace_all(",,", ",")
# Count the number of platforms
videoGames <- videoGames %>%
mutate(num_platforms = str_count(platforms, ",") + 1)
# Parse platforms into individual columns and make the data long
videoGames <- videoGames %>%
separate(platforms, into = paste0("platform", 1:10), sep = ",", fill = "right") %>%
pivot_longer(cols = starts_with("platform"), names_to = "platformNum", values_to = "platform", values_drop_na = TRUE)
# 1. Games with 2 or more platforms (Question 1 Plot)
multi_platform_games <- videoGames %>%
count(title) %>%
filter(n > 1)
ggplot(multi_platform_games, aes(x = reorder(title, n), fill = factor(n))) +
geom_bar(stat = "identity") +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 1 Plot", x = "Title", y = "Number of Platforms")
View(multi_platform_games)
ggplot(multi_platform_games, aes(x = reorder(title, n), fill = factor(n))) +
geom_bar(stat = "identity") +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 1 Plot", x = "Title", y = "Number of Platforms")
# 1. Games with 2 or more platforms (Question 1 Plot)
multi_platform_games <- videoGames %>%
count(title) %>%
filter(n > 1)
ggplot(multi_platform_games, aes(x = reorder(title, n), y = n, fill = factor(n))) +
geom_bar(stat = "identity") +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 1 Plot", x = "Title", y = "Number of Platforms")
View(videoGames)
# Load required libraries
library(tidyverse)
library(rvest)
# Load the CSV file into a data frame
videoGames <- read_csv("U:/Jonah/School/24-25/CSCI 444/Carpenter_Lab5/data/metacritics_2024.csv")
# ######### PART B
#Jonah Carpenter
#Lab5b
library(tidyverse)
library(rvest)
videoGames <- read_csv("data/metacritics_2024.csv")
videoGames$platforms <- videoGames$platforms %>%
str_replace_all("\\s*\\n+\\s*", ", ") %>%
str_replace_all("\\s*,\\s*", ", ") %>%
str_replace_all(",,+", ", ") %>%
str_trim() %>%
str_remove_all(",\\s*$")
num_platforms <- videoGames %>%
mutate(num_platforms = str_count(platforms, ",") + 1) %>%
pull(num_platforms)
max_platforms <- max(num_platforms)
videoGames <- videoGames %>%
separate(platforms, into = paste0("platform", 1:max_platforms), sep = ",", fill = "right") %>%
mutate(across(starts_with("platform"), str_trim))
videoGames <- videoGames %>%
pivot_longer(cols = starts_with("platform"), names_to = "platformNum", values_to = "platform", values_drop_na = TRUE)
unique_platforms <- videoGames %>%
filter(!is.na(platform)) %>%
mutate(platform = str_trim(platform),
platform = str_to_lower(platform),
platform = case_when(
str_detect(platform, "xbox") ~ "Xbox",
str_detect(platform, "playstation") ~ "PlayStation",
str_detect(platform, "nintendo") ~ "Nintendo",
platform == "pc" ~ "PC",
TRUE ~ platform
)) %>%
distinct(platform) %>%
nrow()
#1 What games have 2 or more platforms? - view plot
multi_platform_games <- videoGames %>%
group_by(title) %>%
summarise(platform_count = n()) %>%
filter(platform_count > 1)
ggplot(multi_platform_games, aes(x = reorder(title, platform_count), y = platform_count, fill = factor(platform_count))) +
geom_bar(stat = "identity") +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 2", x = "Title", y = "Number of Platforms") +
theme_minimal()
#1 What games have 2 or more platforms? - view plot
multi_platform_games <- videoGames %>%
group_by(title) %>%
summarise(platform_count = n()) %>%
filter(platform_count > 1)
ggplot(multi_platform_games, aes(x = reorder(title, platform_count), y = platform_count, fill = factor(platform_count))) +
geom_bar(stat = "identity") +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 1", x = "Title", y = "Number of Platforms") +
theme_minimal()
#2 What are the top three genres?  2D Platformer, Adventure, Compilation
all_genres <- videoGames %>%
count(genre) %>%
arrange(desc(n))
ggplot(all_genres, aes(x = reorder(genre, n), y = n, fill = genre)) +
geom_col() +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 2", x = "Genre", y = "Count")
#1 What games have 2 or more platforms? - view plot
multi_platform_games <- videoGames %>%
group_by(title) %>%
summarise(platform_count = n()) %>%
filter(platform_count > 1)
ggplot(multi_platform_games, aes(x = reorder(title, platform_count), y = platform_count, fill = factor(platform_count))) +
geom_bar(stat = "identity") +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 1", x = "Title", y = "Number of Platforms") +
theme_minimal()
#2 What are the top three genres?  2D Platformer, Adventure, Compilation
all_genres <- videoGames %>%
count(genre) %>%
arrange(desc(n))
ggplot(all_genres, aes(x = reorder(genre, n), y = n, fill = genre)) +
geom_col() +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 2", x = "Genre", y = "Count")
#3 Which platform has the LEAST games on the website? Meta Quest at 1
platform_counts <- videoGames %>%
count(platform) %>%
arrange(n)
ggplot(platform_counts, aes(x = reorder(platform, n), y = n, fill = platform)) +
geom_col() +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 3", x = "Platform", y = "Number of Games")
#4 Which of the top 6 genres are found on at least 6 platforms? They all are found on 6+ platforms
top_6_genres <- videoGames %>%
count(genre) %>%
ungroup() %>%
slice_max(n, n = 6)
games_on_top_platforms <- videoGames %>%
filter(genre %in% top_6_genres$genre) %>%
group_by(platform, genre) %>%
summarise(game_count = n()) %>%
ungroup()
ggplot(games_on_top_platforms, aes(x = reorder(genre, game_count), y = game_count, fill = genre)) +
geom_col() +
coord_flip() +
facet_wrap(~ platform, ncol = 3) +
guides(fill = "none") +
labs(title = "Question 4", x = "Genre", y = "Number of Games") +
theme_minimal()
#5 Which genre is the most popular for users? 3 Way tie between Visual novel, top-down shoot'em-up, and point-and-click
user_popular_genre <- videoGames %>%
filter(!is.na(genre), !is.na(userscore)) %>%
group_by(genre) %>%
summarize(mean_userscore = mean(userscore, na.rm = TRUE)) %>%
arrange(desc(mean_userscore))
ggplot(user_popular_genre, aes(x = reorder(genre, mean_userscore), y = mean_userscore, fill = genre)) +
geom_col() +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 5", x = "Genre", y = "Mean User Score") +
theme_minimal()
#6 Which genre is the most popular among critics? Party
critic_popular_genre <- videoGames %>%
group_by(genre) %>%
summarize(mean_metascore = mean(metascore, na.rm = TRUE)) %>%
arrange(desc(mean_metascore))
ggplot(critic_popular_genre, aes(x = reorder(genre, mean_metascore), y = mean_metascore, fill = genre)) +
geom_col() +
coord_flip() +
guides(fill = "none") +
labs(title = "Question 6", x = "Genre", y = "Mean Metascore")
