# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(maps)
library(stringr)
# Read the diabetes2013 dataset, skipping the first row
diabetes_data <- read_csv("data/diabetes2013.csv", skip = 1)
# Wrangle the dataset
diabetes_data <- diabetes_data %>%
rename(region = State, id = `FIPS Codes`) %>%
mutate(across(c(percent, number), as.numeric)) %>%
drop_na() %>%
mutate(region = tolower(region))
# Load the county map data
county_map <- map_data("county")
# Join the county map with the wrangled diabetes dataset
county_map <- county_map %>%
rename(region = region, subregion = subregion) %>%
mutate(id = subregion)
map_data_joined <- county_map %>%
left_join(diabetes_data, by = "region")
View(map_data_joined)
# Wrangle the diabetes dataset for state-level data
# Mutate to extract first two characters of the FIPS code for state-level aggregation
diabetes_data_state <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%
group_by(id) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))
# Wrangle the map data for states
us_map <- map_data("state") %>%
rename(long = x, lat = y, region = region)
# Join the state map data with the summarized diabetes data
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = c("region" = "id"))
# Wrangle the map data for states
us_map <- map_data("state") %>%
rename(long = x, lat = y, region = region)
View(map_data_joined)
glimpse(map_data
glimpse(map_data)
glimpse(map_data)
View(diabetes_data_state)
# Wrangle the map data for states
us_map <- map_data_joined("state") %>%
rename(long = x, lat = y, region = region)
# Wrangle the map data for states
us_map <- map_data("state") %>%
rename(long = x, lat = y, region = region)
# Wrangle the diabetes dataset for state-level data
# Mutate to extract first two characters of the FIPS code for state-level aggregation
diabetes_data_state <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%
group_by(id) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))
# Wrangle the map data for states
us_map <- map_data("state")
# Plot the US map filled by obesityMean
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Join the state map data with the summarized diabetes data
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = c("region" = "id"))
# Join the state map data with the summarized diabetes data
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = c("region" = "id"))
# Plot the US map filled by obesityMean
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Adding state centroids with obesityMean values
us_centroids <- us_map_joined %>%
group_by(region) %>%
summarize(long = mean(long), lat = mean(lat), obesityMean = mean(obesityMean))
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
geom_text(data = us_centroids, aes(long, lat, label = round(obesityMean, 1)),
color = "black", size = 4) +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Wrangle the diabetes dataset for state-level data
# Mutate to extract first two characters of the FIPS code for state-level aggregation
diabetes_data_state <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%
group_by(id) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))
# Wrangle the map data for states
us_map <- map_data("state")
# Join the state map data with the summarized diabetes data
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = c("region" = "id"))
# Plot the US map filled by obesityMean
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Calculate state centroids (mean lat/long for each state)
us_centroids <- us_map_joined %>%
group_by(region) %>%
summarize(long = mean(long), lat = mean(lat), obesityMean = mean(obesityMean))
# Add centroids to the plot with geom_text, not inheriting the polygon aesthetics
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
geom_text(data = us_centroids, aes(long, lat, label = round(obesityMean, 1)),
color = "black", size = 4, inherit.aes = FALSE) +  # Avoid inheriting 'group' aesthetic
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Plot the map
ggplot(map_data_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = percent), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.05) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Read the diabetes2013 dataset, skipping the first row
diabetes_data <- read_csv("data/diabetes2013.csv", skip = 1)
# Wrangle the dataset
diabetes_data <- diabetes_data %>%
rename(region = State, id = `FIPS Codes`) %>%
mutate(across(c(percent, number), as.numeric)) %>%
drop_na() %>%
mutate(region = tolower(region))
# Load the county map data
county_map <- map_data("county")
# Join the county map with the wrangled diabetes dataset
county_map <- county_map %>%
rename(region = region, subregion = subregion) %>%
mutate(id = subregion)
map_data_joined <- county_map %>%
left_join(diabetes_data, by = "region")
# Wrangle the diabetes dataset for state-level data
# Mutate to extract first two characters of the FIPS code for state-level aggregation
diabetes_data_state <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%
group_by(id) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))
# Wrangle the map data for states
us_map <- map_data("state")
# Join the state map data with the summarized diabetes data
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = c("region" = "id"))
# Plot the US map filled by obesityMean
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
View(us_map_joined)
View(diabetes_data_state)
# Join the state map data with the summarized diabetes data
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = c("region" = "id"))
View(us_map_joined)
View(us_map)
View(diabetes_data_state)
View(diabetes_data_state)
# Wrangle the map data for states
us_map <- map_data("state")
View(us_map)
glimpse(us_map)
glimpse(us_map_joined)
# Wrangle the map data for states
us_map <- map_data("state")
View(us_map)
# Load the county map data
county_map <- map_data("county")
View(county_map)
View(us_map)
# Wrangle the map data for states
us_map <- map_data("state")
View(us_map)
# Join the state map data with the summarized diabetes data
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = "region")
# Load necessary libraries
library(tidyverse)
library(maps)
# Wrangle the diabetes dataset for state-level data
# Assuming 'id' in diabetes_data_state contains FIPS codes or state abbreviations
# Convert 'id' to full state names
diabetes_data_state <- diabetes_data_state %>%
mutate(region = state.name[match(id, state.abb)]) %>%
drop_na(region)  # Remove any rows with unmatched states
# Wrangle the map data for states (no subregion is needed at state level)
us_map <- map_data("state")
# Join the state map data with the summarized diabetes data by region (state names)
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = "region")
# Plot the US map filled by obesityMean (or another variable)
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Wrangle the diabetes dataset for state-level data
# Convert the first two characters of the FIPS code into state abbreviations, then map to full state names
diabetes_data_state <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%                      # Extract first 2 characters from FIPS for state codes
mutate(state_abb = state.abb[match(id, sprintf("%02d", 1:50))]) %>%  # Map the FIPS code to state abbreviations
mutate(region = state.name[match(state_abb, state.abb)]) %>%   # Convert state abbreviations to full state names
group_by(region) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))  # Calculate mean obesity by state
# Wrangle the map data for states
us_map <- map_data("state")
# Join the state map data with the summarized diabetes data by state names (region)
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = "region")
# Plot the US map filled by obesityMean
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
View(us_map_joined)
# Check the first few rows of both datasets to inspect the region columns
head(us_map$r
)
# Check the first few rows of both datasets to inspect the region columns
head(us_map$region)
unique(diabetes_data_state$region)
# Convert 'region' in diabetes_data_state to lowercase to match us_map
diabetes_data_state <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%
mutate(state_abb = state.abb[match(id, sprintf("%02d", 1:50))]) %>%
mutate(region = tolower(state.name[match(state_abb, state.abb)])) %>%   # Convert state names to lowercase
group_by(region) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))
# Wrangle the map data for states
us_map <- map_data("state")
# Join the state map data with the summarized diabetes data by region (lowercase state names)
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = "region")
# Check if the join worked properly
glimpse(us_map_joined)
# Plot the US map filled by obesityMean
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Optional: Calculate state centroids and add them to the plot
us_centroids <- us_map_joined %>%
group_by(region) %>%
summarize(long = mean(long), lat = mean(lat), obesityMean = mean(obesityMean))
# Add centroids to the plot with geom_text
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
geom_text(data = us_centroids, aes(long, lat, label = round(obesityMean, 1)),
color = "black", size = 4, inherit.aes = FALSE) +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
diabetes_data <- read_csv("data/diabetes2013.csv", skip = 1)
# A
diabetes_data <- diabetes_data %>%
rename(region = State, id = `FIPS Codes`) %>%
mutate(across(c(percent, number), as.numeric)) %>%
drop_na() %>%
mutate(region = tolower(region))
county_map <- map_data("county")
county_map <- county_map %>%
rename(region = region, subregion = subregion) %>%
mutate(id = subregion)
map_data_joined <- county_map %>%
left_join(diabetes_data, by = "region")
ggplot(map_data_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = percent), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.05) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
View(map_data_joined)
# Plot the map with adjusted color scale and lighter outline color
ggplot(map_data_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = percent), color = "white") +  # Use white outlines for the counties
coord_equal() +
scale_fill_gradient2(low = "#FEE0D2", mid = "#FC9272", high = "#DE2D26", midpoint = 10,
limits = c(5, 20), space = "Lab", na.value = "grey50", guide = "colourbar") +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(title = "percent", nrow = 1))
# B
diabetes_data_state <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%
mutate(state_abb = state.abb[match(id, sprintf("%02d", 1:50))]) %>%
mutate(region = tolower(state.name[match(state_abb, state.abb)])) %>%
group_by(region) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))
us_map <- map_data("state")
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = "region")
us_centroids <- us_map_joined %>%
group_by(region) %>%
summarize(long = mean(long), lat = mean(lat), obesityMean = mean(obesityMean))
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
geom_text(data = us_centroids, aes(long, lat, label = round(obesityMean, 1)),
color = "black", size = 4, inherit.aes = FALSE) +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
View(us_map_joined)
View(diabetes_data_state)
View(diabetes_data)
View(diabetes_data)
# Identify missing states in diabetes_data_state
all_states <- unique(tolower(state.name))  # All US states in lowercase
missing_states <- setdiff(all_states, diabetes_data_state$region)
# Print the missing states
print(missing_states)
# Debug the FIPS code mapping for the missing states
diabetes_data_debug <- diabetes_data %>%
mutate(id = str_sub(id, 1, 2)) %>%
mutate(state_abb = state.abb[match(id, sprintf("%02d", 1:50))]) %>%
mutate(region = state.name[match(state_abb, state.abb)]) %>%
filter(str_to_lower(State) %in% c("arizona", "connecticut", "indiana", "texas"))
# Filter to see the FIPS codes for the missing states
diabetes_data %>%
filter(region %in% c("arizona", "connecticut", "indiana", "texas")) %>%
select(region, `FIPS Codes`, percent)
View(diabetes_data)
# Filter to see the FIPS codes for the missing states
diabetes_data %>%
filter(region %in% c("arizona", "connecticut", "indiana", "texas")) %>%
select(region, `id`, percent)
# Filter to see the FIPS codes for the missing states
diabetes_data %>%
filter(region %in% c("arizona", "connecticut", "indiana", "texas")) %>%
select(region, `FIPS Codes`, percent)
glimpse(diabetes_data)
# Create a mapping from state FIPS codes to state names
fips_to_state <- c(
"01" = "alabama", "02" = "alaska", "04" = "arizona", "05" = "arkansas",
"06" = "california", "08" = "colorado", "09" = "connecticut", "10" = "delaware",
"12" = "florida", "13" = "georgia", "15" = "hawaii", "16" = "idaho",
"17" = "illinois", "18" = "indiana", "19" = "iowa", "20" = "kansas",
"21" = "kentucky", "22" = "louisiana", "23" = "maine", "24" = "maryland",
"25" = "massachusetts", "26" = "michigan", "27" = "minnesota", "28" = "mississippi",
"29" = "missouri", "30" = "montana", "31" = "nebraska", "32" = "nevada",
"33" = "new hampshire", "34" = "new jersey", "35" = "new mexico", "36" = "new york",
"37" = "north carolina", "38" = "north dakota", "39" = "ohio", "40" = "oklahoma",
"41" = "oregon", "42" = "pennsylvania", "44" = "rhode island", "45" = "south carolina",
"46" = "south dakota", "47" = "tennessee", "48" = "texas", "49" = "utah",
"50" = "vermont", "51" = "virginia", "53" = "washington", "54" = "west virginia",
"55" = "wisconsin", "56" = "wyoming"
)
# Add state names to the diabetes data using the FIPS mapping
diabetes_data_state <- diabetes_data %>%
mutate(state_fips = str_sub(id, 1, 2)) %>%               # Extract the state FIPS code
mutate(region = fips_to_state[state_fips]) %>%           # Map the FIPS code to state names
group_by(region) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))  # Summarize obesity data by state
# Wrangle the map data for states
us_map <- map_data("state")
# Join the state map data with the summarized diabetes data by state names (region)
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = "region")
# Plot the US map filled by obesityMean
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
# Load necessary libraries
library(tidyverse)
library(maps)
# Create a mapping from state FIPS codes to state names
fips_to_state <- c(
"01" = "alabama", "02" = "alaska", "04" = "arizona", "05" = "arkansas",
"06" = "california", "08" = "colorado", "09" = "connecticut", "10" = "delaware",
"12" = "florida", "13" = "georgia", "15" = "hawaii", "16" = "idaho",
"17" = "illinois", "18" = "indiana", "19" = "iowa", "20" = "kansas",
"21" = "kentucky", "22" = "louisiana", "23" = "maine", "24" = "maryland",
"25" = "massachusetts", "26" = "michigan", "27" = "minnesota", "28" = "mississippi",
"29" = "missouri", "30" = "montana", "31" = "nebraska", "32" = "nevada",
"33" = "new hampshire", "34" = "new jersey", "35" = "new mexico", "36" = "new york",
"37" = "north carolina", "38" = "north dakota", "39" = "ohio", "40" = "oklahoma",
"41" = "oregon", "42" = "pennsylvania", "44" = "rhode island", "45" = "south carolina",
"46" = "south dakota", "47" = "tennessee", "48" = "texas", "49" = "utah",
"50" = "vermont", "51" = "virginia", "53" = "washington", "54" = "west virginia",
"55" = "wisconsin", "56" = "wyoming"
)
# Wrangle the diabetes dataset to extract state-level data
diabetes_data_state <- diabetes_data %>%
mutate(state_fips = str_sub(id, 1, 2)) %>%               # Extract the state FIPS code
mutate(region = fips_to_state[state_fips]) %>%           # Map the FIPS code to state names
group_by(region) %>%
summarize(obesityMean = mean(as.numeric(percent), na.rm = TRUE))  # Summarize obesity data by state
# Wrangle the map data for states
us_map <- map_data("state")
# Join the state map data with the summarized diabetes data by state names (region)
us_map_joined <- us_map %>%
left_join(diabetes_data_state, by = "region")
# Calculate state centroids (mean lat/long for each state)
us_centroids <- us_map_joined %>%
group_by(region) %>%
summarize(long = mean(long), lat = mean(lat), obesityMean = mean(obesityMean))
# Plot the US map filled by obesityMean and add centroids with obesityMean labels
ggplot(us_map_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = obesityMean), color = "gray") +
geom_text(data = us_centroids, aes(long, lat, label = round(obesityMean, 1)),
color = "black", size = 4, inherit.aes = FALSE) +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.3) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
View(us_map_joined)
ggplot(map_data_joined, aes(long, lat, group = group)) +
geom_polygon(aes(fill = percent), color = "gray") +
coord_equal() +
scale_fill_gradient2(low = "beige", high = "red", mid = "orange", midpoint = 0.05) +
theme_void() +
theme(legend.position = "bottom", legend.box = "horizontal") +
guides(fill = guide_legend(nrow = 1))
View(map_data_joined)
