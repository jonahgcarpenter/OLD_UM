legend.position = "none") +
scale_fill_brewer(palette = "Set3")  # Use Set3 palette for coloring
library(tidyr)
library(ggplot2)
library(stringr)  # Ensure stringr is loaded for str_trim()
# Load the data
drugdeaths <- read.delim("data/drugdeaths.txt", sep = "^")
# Select only the relevant columns: Sex, Age, and opioid types
drugdeaths_selected <- drugdeaths %>%
select(Sex, Age, Heroin, Cocaine, Fentanyl, Oxycodone, Oxymorphone, EtOH, Hydro.codeine, Benzodiazepine, Methadone, Amphet, Tramad)
# Clean up the Y values and pivot the data without Sex and Age
drugdeaths_long <- drugdeaths_selected %>%
# Clean up the Y values and remove any extra spaces or characters
mutate(across(c(Heroin, Cocaine, Fentanyl, Oxycodone, Oxymorphone, EtOH, Hydro.codeine, Benzodiazepine, Methadone, Amphet, Tramad),
~ str_trim(.))) %>%   # Remove extra spaces
mutate(across(c(Heroin, Cocaine, Fentanyl, Oxycodone, Oxymorphone, EtOH, Hydro.codeine, Benzodiazepine, Methadone, Amphet, Tramad),
~ ifelse(. == "Y", "Y", NA))) %>%  # Ensure only valid "Y" values
# Pivot longer to create Type (opioid type) and Result (Y or NA for presence of death)
pivot_longer(cols = Heroin:Tramad, names_to = "Type", values_to = "Result", values_drop_na = TRUE) %>%
# Keep only Type and Result, remove Sex and Age
select(Type, Result)
# Filter for rows where opioid was involved in the death (Result is "Y") and count
opioid_deaths_count <- drugdeaths_long %>%
filter(Result == "Y") %>%
count(Type)
# Plot the results
ggplot(opioid_deaths_count, aes(x = reorder(Type, n), y = n, fill = Type)) +
geom_col() +
labs(x = "Type of Opioid", y = "Number of Deaths", title = "Opioid Deaths by Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  # Rotate x-axis labels
legend.position = "none") +
scale_fill_brewer(palette = "Set3")  # Use Set3 palette for coloring
library(dplyr)
library(stringr)  # For str_replace
# Load the data
inpatient <- read.delim("data/inpatient.tsv", sep = "\t")
# Select needed variables and rename them to remove spaces
inpatient_clean <- inpatient %>%
select(Facility.Name, Average.Total.Payments, Average.Medicare.Payments) %>%
rename(Average_Payments = Average.Total.Payments, Average_Medicare_Payments = Average.Medicare.Payments)
colnames(inpatient)
# Select the needed variables and rename them to remove spaces
inpatient_clean <- inpatient %>%
select(Average.Total.Payments, Average.Medicare.Payments) %>%
rename(Average_Payments = Average.Total.Payments, Average_Medicare_Payments = Average.Medicare.Payments)
# Remove dollar signs and convert columns to numeric
inpatient_clean <- inpatient_clean %>%
mutate(Average_Payments = as.numeric(str_replace(Average_Payments, "\\$", "")),
Average_Medicare_Payments = as.numeric(str_replace(Average_Medicare_Payments, "\\$", "")))
# Calculate the averages
average_payments <- inpatient_clean %>%
summarise(Average_Payments = mean(Average_Payments, na.rm = TRUE),
Average_Medicare_Payments = mean(Average_Medicare_Payments, na.rm = TRUE))
# Print the results
print(average_payments)
View(inpatient_clean)
View(inpatient)
View(average_payments)
# Load necessary libraries
library(rvest)
library(dplyr)
library(stringr)
# Step 1: Scrape IMDB top 10 Box Office movies
url <- 'https://www.imdb.com/chart/boxoffice' # Adjust URL if necessary
page <- read_html(url)
# Step 2: Scrape movie titles
titles <- page %>%
html_nodes(".titleColumn a") %>%
html_text()
# Step 3: Scrape gross data (weekend gross and total gross) and weeks
gross_data <- page %>%
html_nodes(".ratingColumn") %>%
html_text()
# Clean the gross data (remove extra spaces)
gross_data_clean <- str_squish(gross_data)
# Separate weekend gross and total gross using seq functions
weekend_gross <- gross_data_clean[seq(1, length(gross_data_clean), 2)]
View(page)
# Step 1: Scrape IMDB top 10 Box Office movies
url <- 'https://www.imdb.com/chart/boxoffice/?ref_=nv_ch_cht' # Adjust URL if necessary
page <- read_html(url)
# Step 2: Scrape movie titles
titles <- page %>%
html_nodes(".titleColumn a") %>%
html_text()
# Step 3: Scrape gross data (weekend gross and total gross) and weeks
gross_data <- page %>%
html_nodes(".ratingColumn") %>%
html_text()
# Clean the gross data (remove extra spaces)
gross_data_clean <- str_squish(gross_data)
# Separate weekend gross and total gross using seq functions
weekend_gross <- gross_data_clean[seq(1, length(gross_data_clean), 2)]
gross <- gross_data_clean[seq(2, length(gross_data_clean), 2)]
# Clean up gross values (remove '$' and 'M' symbols)
weekend_gross_numeric <- as.numeric(str_replace_all(weekend_gross, "[$M]", ""))
install.packages("robotstxt")
library(robotstxt)
paths_allowed(domain = "imdb.com")
library(rvest)
library(tibble)
# Step 1: Read the webpage HTML
page <- read_html("https://www.imdb.com/chart/top/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".titleColumn a") %>%
html_text()
View(page)
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%
html_text()
View(page)
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
gsub("[()]", "", .) %>%
as.numeric()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
as.numeric() %>%
na.omit()
# Step 1: Read the webpage HTML
page <- read_html("https://www.imdb.com/chart/top/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%
html_text()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
as.numeric() %>%
na.omit()
# Step 4: Extract IMDB scores (if relevant)
scores <- page %>%
html_nodes(".ratingGroup--imdb-rating") %>%
html_text() %>%
str_sub(start=1, end=3) %>%
as.numeric()
# Step 5: Create a tibble
imdb_top_10 <- tibble(
title = titles,
year = years,
score = scores
)
# View the data
print(imdb_top_10)
library(stringr)
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
as.numeric() %>%
na.omit()
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%
html_text()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
as.numeric() %>%
na.omit()
# Step 4: Extract IMDB scores (if relevant)
scores <- page %>%
html_nodes(".ratingGroup--imdb-rating") %>%
html_text() %>%
str_sub(start=1, end=3) %>%
as.numeric()
# Step 5: Create a tibble
imdb_top_10 <- tibble(
title = titles,
year = years,
score = scores
)
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
as.numeric() %>%
na.omit()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%  # CSS selector for the years
html_text() %>%
str_extract("\\d{4}") %>%         # Extract the four-digit year using regex
as.numeric()
library(robotstxt)
paths_allowed(domain = "imdb.com")
library(rvest)
library(tibble)
library(stringr)
# Step 1: Read the webpage HTML
page <- read_html("https://www.imdb.com/chart/top/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".titleColumn a") %>%  # Adjusted selector for movie titles
html_text()
# Step 1: Read the webpage HTML
page <- read_html("https://www.imdb.com/chart/top/")
# Step 2: Extract movie titles (using your original working selector)
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%  # Keeping your original selector
html_text()
# Step 3: Extract years (fixing the issue with regex)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
str_extract("\\d{4}") %>%  # Extract the 4-digit year using regex
as.numeric()               # Convert to numeric
# Step 3: Extract years (fixing the issue with regex)
years <- page %>%
html_nodes(".titleColumn span") %>%   # Adjusted CSS selector for years
html_text() %>%
str_extract("\\d{4}") %>%             # Extract the 4-digit year
as.numeric()
# Step 3: Extract years (fixing the issue with regex)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
as.numeric() %>%
na.omit()
# Step 1: Read the webpage HTML
page <- read_html("https://www.imdb.com/chart/top/")
# Step 2: Extract movie titles (using your original working selector)
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%
html_text()
# Step 3: Extract years (fixing the selector for the year)
years <- page %>%
html_nodes(".titleColumn span") %>%  # Correct selector to target the year inside span
html_text() %>%
str_extract("\\d{4}") %>%            # Extract the 4-digit year
as.numeric()
# Step 4: Extract IMDB scores
scores <- page %>%
html_nodes(".imdbRating strong") %>% # Corrected selector to get the actual ratings
html_text() %>%
as.numeric()
# Step 2: Extract movie titles (using your original working selector)
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%
html_text()
# Step 3: Extract years (fixing the selector for the year)
years <- page %>%
html_nodes(".titleColumn span") %>%  # Correct selector to target the year inside span
html_text() %>%
str_extract("\\d{4}") %>%            # Extract the 4-digit year
as.numeric()
# Step 4: Extract IMDB scores
scores <- page %>%
html_nodes(".imdbRating strong") %>% # Corrected selector to get the actual ratings
html_text() %>%
as.numeric()
# Step 5: Create a tibble
imdb_top_10 <- tibble(
title = titles,
year = years,
score = scores
)
# View the data
print(imdb_top_10)
# Step 1: Read the webpage HTML
page <- read_html("https://www.imdb.com/chart/top/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%
html_text()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%  # CSS selector for the years
html_text() %>%
str_extract("\\d{4}") %>%         # Extract the four-digit year using regex
as.numeric()
# Step 4: Extract IMDB scores (if relevant)
scores <- page %>%
html_nodes(".ratingGroup--imdb-rating") %>%
html_text() %>%
str_sub(start=1, end=3) %>%
as.numeric()
# Step 5: Create a tibble
imdb_top_10 <- tibble(
title = titles,
year = years,
score = scores
)
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".cli-title-metadata-item") %>%  # Targeting the class specific to the year
html_text() %>%
str_extract("\\d{4}") %>%  # Extract the 4-digit year
as.numeric()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".cli-title-metadata-item") %>%  # Targeting the class specific to the year
html_text() %>%
str_extract("\\d{4}") %>%  # Extract the 4-digit year
as.numeric()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".cli-title-metadata-item") %>%
html_text() %>%
str_extract("\\d{4}") %>%  # Extract the 4-digit year
as.numeric() %>%
na.omit()  # Omit NA values
# Step 4: Extract IMDB scores (if relevant)
scores <- page %>%
html_nodes(".ratingGroup--imdb-rating") %>%
html_text() %>%
str_sub(start=1, end=3) %>%
as.numeric()
# Step 5: Create a tibble
imdb_top_10 <- tibble(
title = titles,
year = years,
score = scores
)
# View the data
print(imdb_top_10)
# Step 1: Read the webpage HTML
page <- read_html("https://www.imdb.com/chart/boxoffice/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".ipc-title-link-wrapper") %>%
html_text()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".cli-title-metadata-item") %>%
html_text() %>%
str_extract("\\d{4}") %>%  # Extract the 4-digit year
as.numeric() %>%
na.omit()  # Omit NA values
# Step 4: Extract IMDB scores (if relevant)
scores <- page %>%
html_nodes(".ratingGroup--imdb-rating") %>%
html_text() %>%
str_sub(start=1, end=3) %>%
as.numeric()
# Step 3: Extract years (if needed)
years <- page %>%
html_nodes(".secondaryInfo") %>%
html_text() %>%
as.numeric() %>%
na.omit()
# Load necessary libraries
library(rvest)
library(stringr)
library(tibble)
# Step 1: Read the IMDB Box Office page
page <- read_html("https://www.imdb.com/chart/boxoffice/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes(".titleColumn a") %>%
html_text()
# Step 3: Extract weekend gross (note that this includes '$' and 'M')
weekend_gross <- page %>%
html_nodes(".ratingColumn:nth-child(4)") %>%  # The weekend gross is in the 4th column
html_text() %>%
str_replace_all("\\$|M", "") %>%  # Remove '$' and 'M'
as.numeric()
# Step 4: Extract total gross (note that this includes '$' and 'M')
total_gross <- page %>%
html_nodes(".ratingColumn:nth-child(5)") %>%  # The total gross is in the 5th column
html_text() %>%
str_replace_all("\\$|M", "") %>%
as.numeric()
# Step 5: Extract number of weeks in theaters
weeks <- page %>%
html_nodes(".weeksColumn") %>%
html_text() %>%
as.numeric()
# Step 6: Create a tibble with the scraped data
topGrossingFilms <- tibble(
Title = titles,
Weekend_Gross = weekend_gross,
Gross = total_gross,
Number_of_weeks = weeks
)
# Step 7: View the tibble
print(topGrossingFilms)
# Step 1: Read the IMDB Box Office page
page <- read_html("https://www.imdb.com/chart/boxoffice/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes("td.titleColumn a") %>%
html_text()
# Step 2: Extract movie titles
titles <- page %>%
html_nodes("h3.ipc-title__text") %>%
html_text()
# Step 3: Extract all monetary values (weekend gross, total gross, and weeks)
gross_data <- page %>%
html_nodes(".sc-8f57e62c-2.ftiqYS") %>%
html_text()
# Step 4: Separate the gross data (since all have the same class, we need to slice it)
weekend_gross <- gross_data[seq(1, length(gross_data), by = 3)] %>%
str_replace_all("\\$|M", "") %>%  # Remove $ and M
as.numeric()
total_gross <- gross_data[seq(2, length(gross_data), by = 3)] %>%
str_replace_all("\\$|M", "") %>%
as.numeric()
weeks <- gross_data[seq(3, length(gross_data), by = 3)] %>%
as.numeric()
# Step 5: Create a tibble with the scraped data
topGrossingFilms <- tibble(
Title = titles,
Weekend_Gross = weekend_gross,
Gross = total_gross,
Number_of_weeks = weeks
)
print(titles)
titles <- titles[str_detect(titles, "^\\d+\\.\\s")]
# Step 5: Create a tibble with the scraped data
topGrossingFilms <- tibble(
Title = titles,
Weekend_Gross = weekend_gross,
Gross = total_gross,
Number_of_weeks = weeks
)
# Step 6: View the tibble
print(topGrossingFilms)
# Load necessary libraries
library(rvest)
library(stringr)
library(tibble)
library(ggplot2)
# Step 1: Read the IMDB Box Office page
page <- read_html("https://www.imdb.com/chart/boxoffice/")
# Step 2: Extract movie titles
titles <- page %>%
html_nodes("h3.ipc-title__text") %>%
html_text()
# Filter out non-movie titles
titles <- titles[str_detect(titles, "^\\d+\\.\\s")]
# Step 3: Extract all monetary values (weekend gross, total gross, and weeks)
gross_data <- page %>%
html_nodes(".sc-8f57e62c-2.ftiqYS") %>%
html_text()
# Step 4: Separate the gross data (since all have the same class, we need to slice it)
weekend_gross <- gross_data[seq(1, length(gross_data), by = 3)] %>%
str_replace_all("\\$|M", "") %>%  # Remove $ and M
as.numeric()
total_gross <- gross_data[seq(2, length(gross_data), by = 3)] %>%
str_replace_all("\\$|M", "") %>%
as.numeric()
weeks <- gross_data[seq(3, length(gross_data), by = 3)] %>%
as.numeric()
# Step 5: Create a tibble with the scraped data
topGrossingFilms <- tibble(
Title = titles,
Weekend_Gross = weekend_gross,
Gross = total_gross,
Number_of_weeks = weeks
)
# Step 6: Add a new column 'Average_Gross' (Gross divided by Number_of_weeks)
topGrossingFilms <- topGrossingFilms %>%
mutate(Average_Gross = Gross / Number_of_weeks) %>%
arrange(desc(Average_Gross))  # Sort in descending order of Average_Gross
library(dplyr)
# Step 6: Add a new column 'Average_Gross' (Gross divided by Number_of_weeks)
topGrossingFilms <- topGrossingFilms %>%
mutate(Average_Gross = Gross / Number_of_weeks) %>%
arrange(desc(Average_Gross))  # Sort in descending order of Average_Gross
# Step 7: View the tibble
print(topGrossingFilms)
# Step 8: Save the tibble as a CSV file
write.csv(topGrossingFilms, "top_grossing_films.csv", row.names = FALSE)
# Step 9: Plot Average_Gross by Number_of_weeks using a column chart
ggplot(topGrossingFilms, aes(x = Number_of_weeks, y = Average_Gross)) +
geom_col() +
labs(title = "Average Gross by Number of Weeks",
x = "Number of Weeks in Theaters",
y = "Average Gross") +
theme_minimal()
# Step 9: Plot Number_of_weeks by Average_Gross using a column chart
ggplot(topGrossingFilms, aes(x = Average_Gross, y = Number_of_weeks)) +
geom_col() +
labs(title = "Number of Weeks by Average Gross",
x = "Average Gross",
y = "Number of Weeks in Theaters") +
theme_minimal()
# Step 9: Plot Average_Gross by Number_of_weeks using a column chart
ggplot(topGrossingFilms, aes(x = Number_of_weeks, y = Average_Gross)) +
geom_col() +
labs(title = "Average Gross by Number of Weeks",
x = "Number of Weeks in Theaters",
y = "Average Gross") +
theme_minimal()
# Step 9: Plot Number_of_weeks by Average_Gross using a column chart with legend
ggplot(topGrossingFilms, aes(x = Average_Gross, y = Number_of_weeks, fill = Title)) +
geom_col() +
labs(title = "Number of Weeks by Average Gross",
x = "Average Gross",
y = "Number of Weeks in Theaters",
fill = "Title") +  # This ensures the legend is labeled 'Title'
theme_minimal() +
theme(legend.position = "right")  # Move the legend to the right
# Step 9: Plot Average_Gross by Number_of_weeks using a column chart with legend
ggplot(topGrossingFilms, aes(x = Number_of_weeks, y = Average_Gross, fill = Title)) +
geom_col() +
labs(title = "Average Gross by Number of Weeks",
x = "Number of Weeks in Theaters",
y = "Average Gross",
fill = "Title") +  # This ensures the legend is labeled 'Title'
theme_minimal() +
theme(legend.position = "right")  # Move the legend to the right
